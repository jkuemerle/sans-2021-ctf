{"results":[{"id":1,"challenge_id":1,"type":"standard","content":"You need to work with the server-side API directly. Try different HTTP verbs on different entities exposed through the API.","cost":45},{"id":2,"challenge_id":2,"type":"standard","content":"Who would want a server access log to be accessible through a web application?","cost":70},{"id":3,"challenge_id":3,"type":"standard","content":"You have to assign the unassignable.","cost":45},{"id":4,"challenge_id":4,"type":"standard","content":"It is just slightly harder to find than the score board link.","cost":25},{"id":5,"challenge_id":5,"type":"standard","content":"Look out for a tweet praising new functionality of the web shop. Then find a third party vulnerability associated with it.","cost":135},{"id":6,"challenge_id":6,"type":"standard","content":"He might have spoilered it on at least one occasion where a camera was running. Maybe elsewhere as well.","cost":45},{"id":7,"challenge_id":7,"type":"standard","content":"The developers truly believe in \"Security through Obscurity\" over actual access restrictions.","cost":100},{"id":8,"challenge_id":8,"type":"standard","content":"The feature you need to exploit for this challenge is not directly advertised anywhere.","cost":100},{"id":9,"challenge_id":9,"type":"standard","content":"After finding a CAPTCHA bypass, write a script that automates feedback submission. Or open many browser tabs and be really quick.","cost":45},{"id":10,"challenge_id":10,"type":"standard","content":"In previous releases this challenge was wrongly accused of being based on CSRF.","cost":100},{"id":11,"challenge_id":11,"type":"standard","content":"Find out how the application handles unavailable products and try to find a loophole.","cost":70},{"id":12,"challenge_id":12,"type":"standard","content":"What is even \"better\" than a legacy page with a homegrown RegEx sanitizer? Having CSP injection issues on the exact same page as well!","cost":70},{"id":13,"challenge_id":13,"type":"standard","content":"Only some input fields validate their input. Even less of these are persisted in a way where their content is shown on another screen.","cost":45},{"id":14,"challenge_id":14,"type":"standard","content":"Analyze and tamper with links in the application that deliver a file directly.","cost":10},{"id":15,"challenge_id":15,"type":"standard","content":"Look for an input field where its content appears in the HTML when its form is submitted.","cost":10},{"id":16,"challenge_id":16,"type":"standard","content":"Find out where this information could come from. Then craft a UNION SELECT attack string against an endpoint that offers an unnecessary way to filter data.","cost":45},{"id":17,"challenge_id":17,"type":"standard","content":"The developers who disabled the interface think they could go invisible by just closing their eyes.","cost":25},{"id":18,"challenge_id":18,"type":"standard","content":"If you solved one of the three file access challenges, you already know where to find the easter egg.","cost":70},{"id":19,"challenge_id":19,"type":"standard","content":"Try to find and attack an endpoint that responds with user information. SQL Injection is not the solution here.","cost":100},{"id":20,"challenge_id":20,"type":"standard","content":"Try to create the needed user \"out of thin air\".","cost":70},{"id":21,"challenge_id":21,"type":"standard","content":"Try to submit bad input to forms. Alternatively tamper with URL paths or parameters.","cost":10},{"id":22,"challenge_id":22,"type":"standard","content":"Try to identify past special event or holiday campaigns of the shop first.","cost":70},{"id":23,"challenge_id":23,"type":"standard","content":"Brute force is not the only option for this challenge, but a perfectly viable one.","cost":100},{"id":24,"challenge_id":24,"type":"standard","content":"Once you found admin section of the application, this challenge is almost trivial.","cost":25},{"id":25,"challenge_id":25,"type":"standard","content":"Try either a) a knowledgable brute force attack or b) reverse engineering or c) some research in the cloud.","cost":135},{"id":26,"challenge_id":26,"type":"standard","content":"You can solve this by tampering with the user interface or by intercepting the communication with the RESTful backend.","cost":45},{"id":27,"challenge_id":27,"type":"standard","content":"Observe the flow of product review posting and editing and see if you can exploit it.","cost":45},{"id":28,"challenge_id":28,"type":"standard","content":"This challenge is explicitly not about acquiring the RSA private key used for JWT signing.","cost":135},{"id":29,"challenge_id":29,"type":"standard","content":"You need to trick a security mechanism into thinking that the file you want has a valid file type.","cost":70},{"id":30,"challenge_id":30,"type":"standard","content":"You need to trick a security mechanism into thinking that the file you want has a valid file type.","cost":70},{"id":31,"challenge_id":31,"type":"standard","content":"This challenge has nothing to do with mistyping web domains. There is no conveniently misplaced file helping you with this one either. Or is there?","cost":100},{"id":32,"challenge_id":32,"type":"standard","content":"Turns out that something is technically and legally wrong with the implementation of the \"right to be forgotten\" for users.","cost":45},{"id":33,"challenge_id":33,"type":"standard","content":"Trick the regular Data Export to give you more than actually belongs to you.","cost":70},{"id":34,"challenge_id":34,"type":"standard","content":"Finding a piece of displayed information that could originate from an HTTP header is part of this challenge.","cost":70},{"id":35,"challenge_id":35,"type":"standard","content":"You need to trick the hacking progress persistence feature into thinking you solved challenge #999.","cost":135},{"id":36,"challenge_id":36,"type":"standard","content":"Once you have it, a technique called \"Password Spraying\" might prove useful.","cost":100},{"id":37,"challenge_id":37,"type":"standard","content":"Your own SQLi and someone else's Ctrl-V will be your accomplices in this challenge!","cost":70},{"id":38,"challenge_id":38,"type":"standard","content":"This challenge has nothing to do with mistyping web domains. Investigate the forgotten developer's backup file instead.","cost":70},{"id":39,"challenge_id":39,"type":"standard","content":"Try different SQL Injection attack patterns depending whether you know the admin's email address or not.","cost":25},{"id":40,"challenge_id":40,"type":"standard","content":"This challenge will make you go after a needle in a haystack.","cost":45},{"id":41,"challenge_id":41,"type":"standard","content":"If you know Bender's email address, try SQL Injection. Bender's password hash might not help you very much.","cost":45},{"id":42,"challenge_id":42,"type":"standard","content":"The security flaw behind this challenge is 100% OWASP Juice Shop's fault and 0% Google's.","cost":70},{"id":43,"challenge_id":43,"type":"standard","content":"Try cracking Jim's password hash if you harvested it already. Alternatively, if you know Jim's email address, try SQL Injection.","cost":45},{"id":44,"challenge_id":44,"type":"standard","content":"You should listen to MC's hit song \"Protect Ya Passwordz\".","cost":25},{"id":45,"challenge_id":45,"type":"standard","content":"The underlying flaw of this challenge is a lot more human error than technical weakness.","cost":135},{"id":46,"challenge_id":46,"type":"standard","content":"Have an eye on the HTTP traffic while placing products in the shopping basket. Changing the quantity of products already in the basket doesn't count.","cost":45},{"id":47,"challenge_id":47,"type":"standard","content":"You need to trick a security mechanism into thinking that the file you want has a valid file type.","cost":70},{"id":48,"challenge_id":48,"type":"standard","content":"Punctuality is the politeness of kings.","cost":135},{"id":49,"challenge_id":49,"type":"standard","content":"You might have to peel through several layers of tough-as-nails encryption for this challenge.","cost":70},{"id":50,"challenge_id":50,"type":"standard","content":"This challenge is essentially a stripped-down Denial of Service (DoS) attack.","cost":70},{"id":51,"challenge_id":51,"type":"standard","content":"Take a close look on how the $where query operator works in MongoDB.","cost":100},{"id":52,"challenge_id":52,"type":"standard","content":"Take a close look on how the equivalent of UPDATE-statements in MongoDB work.","cost":70},{"id":53,"challenge_id":53,"type":"standard","content":"We might have failed to take this out of our code properly.","cost":10},{"id":54,"challenge_id":54,"type":"standard","content":"This one should be equally easy to a) brute force, b) crack the password hash or c) simply guess.","cost":25},{"id":55,"challenge_id":55,"type":"standard","content":"You literally need to make the shop owe you any amount of money.","cost":45},{"id":56,"challenge_id":56,"type":"standard","content":"You do not have to pay anything to unlock this challenge! Nonetheless, donations are very much appreciated.","cost":135},{"id":57,"challenge_id":57,"type":"standard","content":"We won't even ask you to confirm that you did. Just read it. Please. Pretty please.","cost":10},{"id":58,"challenge_id":58,"type":"standard","content":"Only by visiting a special URL you can confirm that you read it carefully.","cost":45},{"id":59,"challenge_id":59,"type":"standard","content":"Look for one of the following: a) broken admin functionality, b) holes in RESTful API or c) possibility for SQL Injection.","cost":45},{"id":60,"challenge_id":60,"type":"standard","content":"Look for a url parameter where its value appears in the page it is leading to.","cost":25},{"id":61,"challenge_id":61,"type":"standard","content":"You can solve this by cleverly interacting with the UI or bypassing it altogether.","cost":10},{"id":62,"challenge_id":62,"type":"standard","content":"Not as trivial as Jim's but still not too difficult with some \"Futurama\" background knowledge.","cost":70},{"id":63,"challenge_id":63,"type":"standard","content":"Nothing a little bit of Facebook stalking couldn't reveal. Might involve a historical twist.","cost":100},{"id":64,"challenge_id":64,"type":"standard","content":"It's hard for celebrities to pick a security question from a hard-coded list where the answer is not publicly exposed.","cost":45},{"id":65,"challenge_id":65,"type":"standard","content":"Find a way to bypass the rate limiting and brute force the obfuscated answer to Morty's security question.","cost":100},{"id":66,"challenge_id":66,"type":"standard","content":"The product you might want to give a closer look is the OWASP Juice Shop Logo (3D-printed).","cost":100},{"id":67,"challenge_id":67,"type":"standard","content":"Reverse engineering something bad can make good things happen.","cost":135},{"id":68,"challenge_id":68,"type":"standard","content":"\"SSTi\" is a clear indicator that this has nothing to do with anything Angular. Also, make sure to use only our non-malicious malware.","cost":135},{"id":69,"challenge_id":69,"type":"standard","content":"Try to find a reference or clue behind the scenes. Or simply guess what URL the Score Board might have.","cost":10},{"id":70,"challenge_id":70,"type":"standard","content":"Undoubtably you want to read our security policy before conducting any research on our application.","cost":25},{"id":71,"challenge_id":71,"type":"standard","content":"The \"Comment\" field in the \"Customer Feedback\" screen is where you want to put your focus on.","cost":70},{"id":72,"challenge_id":72,"type":"standard","content":"No matter how good your eyes are, you will need tool assistance for this challenge.","cost":70},{"id":73,"challenge_id":73,"type":"standard","content":"Your attack payload must not trigger the protection against too many iterations.","cost":135},{"id":74,"challenge_id":74,"type":"standard","content":"This vulnerability will not affect any customer of the shop. It is aimed exclusively at its developers.","cost":100},{"id":75,"challenge_id":75,"type":"standard","content":"The 2FA implementation requires to store a secret for every user. You will need to find a way to access this secret in order to solve this challenge.","cost":100},{"id":76,"challenge_id":76,"type":"standard","content":"This challenge exploits a weird option that is supported when signing tokens with JWT.","cost":100},{"id":77,"challenge_id":77,"type":"standard","content":"You can attach a small file to the \"Complaint\" form. Investigate how this upload actually works.","cost":45},{"id":78,"challenge_id":78,"type":"standard","content":"You can attach a PDF or ZIP file to the \"Complaint\" form. Investigate how this upload actually works.","cost":45},{"id":79,"challenge_id":79,"type":"standard","content":"Gather information on where user data is stored and how it is addressed. Then craft a corresponding UNION SELECT attack.","cost":70},{"id":80,"challenge_id":80,"type":"standard","content":"You have to reuse the vulnerability behind one other 6-star challenge to be able to solve this one.","cost":135},{"id":81,"challenge_id":81,"type":"standard","content":"Have an eye on the HTTP traffic while shopping. Alternatively try to find a client-side association of users to their basket.","cost":25},{"id":82,"challenge_id":82,"type":"standard","content":"Report one of two possible answers via the \"Customer Feedback\" form. Do not forget to submit the library's version as well.","cost":70},{"id":83,"challenge_id":83,"type":"standard","content":"Report one of four possible answers via the \"Customer Feedback\" form.","cost":25},{"id":84,"challenge_id":84,"type":"standard","content":"You have to find a way to beat the allowlist of allowed redirect URLs.","cost":70},{"id":85,"challenge_id":85,"type":"standard","content":"The leverage point for this challenge is the deprecated B2B interface.","cost":45},{"id":86,"challenge_id":86,"type":"standard","content":"It is not as easy as sending a large amount of data directly to the deprecated B2B interface.","cost":100},{"id":87,"challenge_id":87,"type":"standard","content":"Before you invest time bypassing the API, you might want to play around with the UI a bit.","cost":10},{"id":88,"challenge_id":88,"type":"standard","content":"Check the Photo Wall for an image that could not be loaded correctly.","cost":10},{"id":89,"challenge_id":89,"type":"standard","content":"This challenge would formally have to be in several categories as the developers made multiple gaffes for this to be possible.","cost":100},{"id":90,"challenge_id":90,"type":"standard","content":"Try to guess what URL the endpoint might have.","cost":10},{"id":91,"challenge_id":91,"type":"standard","content":"Look closely at what happens when you attempt to upgrade your account.","cost":45},{"id":92,"challenge_id":92,"type":"standard","content":"Find a form which updates the username and then construct a malicious page in the online HTML editor.","cost":45},{"id":93,"challenge_id":93,"type":"standard","content":"Copy + Paste = Solved!","cost":10},{"id":94,"challenge_id":94,"type":"standard","content":"You might have to do some OSINT on his social media personas to find out his honest answer to the security question.","cost":70},{"id":95,"challenge_id":95,"type":"standard","content":"Take a look at the meta data of the corresponding photo.","cost":25},{"id":96,"challenge_id":96,"type":"standard","content":"Take a look at the details in the photo to determine the location of where it was taken.","cost":25},{"id":97,"challenge_id":97,"type":"standard","content":"Think of a way to get a hold of the internal workings on the chatbot API.","cost":100},{"id":98,"challenge_id":98,"type":"standard","content":"Take a look at the details in the photo to determine the location of where it was taken.","cost":70},{"id":99,"challenge_id":99,"type":"standard","content":"Just keep asking.","cost":10},{"id":100,"challenge_id":100,"type":"standard","content":"You should read up on vulnerabilities in popular NodeJs template engines.","cost":100},{"id":101,"challenge_id":101,"type":"standard","content":"See the challenge text. ","cost":45},{"id":102,"challenge_id":102,"type":"standard","content":"See the challenge text. ","cost":45}]}