- name: API-only XSS
  description: >-
    Perform a <i>persisted</i> XSS attack with <code>&lt;iframe
    src="javascript:alert(&#x60;xss&#x60;)"&gt;</code> without using the
    frontend application at all. (Difficulty Level: 3)
  max_attempts: 0
  value: 450
  category: XSS
  type: standard
  state: visible
  flags:
    - type: static
      content: 074a9875405e0a0866702fab22e2af5ed5d1b8b8
      data: null
  hints:
    - type: standard
      content: >-
        You need to work with the server-side API directly. Try different HTTP
        verbs on different entities exposed through the API.
      cost: 45
- name: Access Log
  description: 'Gain access to any access log file of the server. (Difficulty Level: 4)'
  max_attempts: 0
  value: 700
  category: Sensitive Data Exposure
  type: standard
  state: visible
  flags:
    - type: static
      content: c0c6efe8cc4cdc5d7afb9b17d8622d3fd2d142c2
      data: null
  hints:
    - type: standard
      content: >-
        Who would want a server access log to be accessible through a web
        application?
      cost: 70
- name: Admin Registration
  description: 'Register as a user with administrator privileges. (Difficulty Level: 3)'
  max_attempts: 0
  value: 450
  category: Improper Input Validation
  type: standard
  state: visible
  flags:
    - type: static
      content: b5854e22eeabd8727afa13bd435143b1610c8cf5
      data: null
  hints:
    - type: standard
      content: You have to assign the unassignable.
      cost: 45
- name: Admin Section
  description: 'Access the administration section of the store. (Difficulty Level: 2)'
  max_attempts: 0
  value: 250
  category: Broken Access Control
  type: standard
  state: visible
  flags:
    - type: static
      content: 11b1e19904eee2bf0044fe664cca84af10eb4aea
      data: null
  hints:
    - type: standard
      content: It is just slightly harder to find than the score board link.
      cost: 25
- name: Arbitrary File Write
  description: >-
    Overwrite the <a href="/ftp/legal.md">Legal Information</a> file.
    (Difficulty Level: 6)
  max_attempts: 0
  value: 1350
  category: Vulnerable Components
  type: standard
  state: visible
  flags:
    - type: static
      content: 7dbace0e1877cb3d6488a5d07f1cdd328e2a6570
      data: null
  hints:
    - type: standard
      content: >-
        Look out for a tweet praising new functionality of the web shop. Then
        find a third party vulnerability associated with it.
      cost: 135
- name: Bjoern's Favorite Pet
  description: >-
    Reset the password of Bjoern's OWASP account via the <a
    href="/#/forgot-password">Forgot Password</a> mechanism with <i>the original
    answer</i> to his security question. (Difficulty Level: 3)
  max_attempts: 0
  value: 450
  category: Broken Authentication
  type: standard
  state: visible
  flags:
    - type: static
      content: 174f57084bbb620945a6ae6b85db9b9ac69a0ba2
      data: null
  hints:
    - type: standard
      content: >-
        He might have spoilered it on at least one occasion where a camera was
        running. Maybe elsewhere as well.
      cost: 45
- name: Blockchain Hype
  description: >-
    Learn about the Token Sale before its official announcement. (Difficulty
    Level: 5)
  max_attempts: 0
  value: 1000
  category: Security through Obscurity
  type: standard
  state: visible
  flags:
    - type: static
      content: f2d77599707b71faf31ecc9feb70c4f231997f6e
      data: null
  hints:
    - type: standard
      content: >-
        The developers truly believe in "Security through Obscurity" over actual
        access restrictions.
      cost: 100
- name: Blocked RCE DoS
  description: >-
    Perform a Remote Code Execution that would keep a less hardened application
    busy <em>forever</em>. (Difficulty Level: 5)
  max_attempts: 0
  value: 1000
  category: Insecure Deserialization
  type: standard
  state: visible
  flags:
    - type: static
      content: 332bf095c85159a1d549a3744b0a5ec08e360ca0
      data: null
  hints:
    - type: standard
      content: >-
        The feature you need to exploit for this challenge is not directly
        advertised anywhere.
      cost: 100
- name: CAPTCHA Bypass
  description: >-
    Submit 10 or more customer feedbacks within 10 seconds. (Difficulty Level:
    3)
  max_attempts: 0
  value: 450
  category: Broken Anti Automation
  type: standard
  state: visible
  flags:
    - type: static
      content: e4243fd6b8d34d2c7910abd12238f637b512f00d
      data: null
  hints:
    - type: standard
      content: >-
        After finding a CAPTCHA bypass, write a script that automates feedback
        submission. Or open many browser tabs and be really quick.
      cost: 45
- name: Change Bender's Password
  description: >-
    Change Bender's password into <i>slurmCl4ssic</i> without using SQL
    Injection or Forgot Password. (Difficulty Level: 5)
  max_attempts: 0
  value: 1000
  category: Broken Authentication
  type: standard
  state: visible
  flags:
    - type: static
      content: f85287dd4179b3a9a2511623810fe06654e03dbc
      data: null
  hints:
    - type: standard
      content: >-
        In previous releases this challenge was wrongly accused of being based
        on CSRF.
      cost: 100
- name: Christmas Special
  description: 'Order the Christmas special offer of 2014. (Difficulty Level: 4)'
  max_attempts: 0
  value: 700
  category: Injection
  type: standard
  state: visible
  flags:
    - type: static
      content: 9a8497d68e6dd0486b1158bbc8eb49c0013ff12b
      data: null
  hints:
    - type: standard
      content: >-
        Find out how the application handles unavailable products and try to
        find a loophole.
      cost: 70
- name: CSP Bypass
  description: >-
    Bypass the Content Security Policy and perform an XSS attack with
    <code>&lt;script&gt;alert(&#x60;xss&#x60;)&lt;/script&gt;</code> on a legacy
    page within the application. (Difficulty Level: 4)
  max_attempts: 0
  value: 700
  category: XSS
  type: standard
  state: visible
  flags:
    - type: static
      content: 85ab1ed954d693899721b4ed26779ca09dd6904a
      data: null
  hints:
    - type: standard
      content: >-
        What is even "better" than a legacy page with a homegrown RegEx
        sanitizer? Having CSP injection issues on the exact same page as well!
      cost: 70
- name: Client-side XSS Protection
  description: >-
    Perform a <i>persisted</i> XSS attack with <code>&lt;iframe
    src="javascript:alert(&#x60;xss&#x60;)"&gt;</code> bypassing a
    <i>client-side</i> security mechanism. (Difficulty Level: 3)
  max_attempts: 0
  value: 450
  category: XSS
  type: standard
  state: visible
  flags:
    - type: static
      content: 3b62c9b66f47bf917d58383c662fa71938d4a805
      data: null
  hints:
    - type: standard
      content: >-
        Only some input fields validate their input. Even less of these are
        persisted in a way where their content is shown on another screen.
      cost: 45
- name: Confidential Document
  description: 'Access a confidential document. (Difficulty Level: 1)'
  max_attempts: 0
  value: 100
  category: Sensitive Data Exposure
  type: standard
  state: visible
  flags:
    - type: static
      content: 3371706528769df071a5e1395aee183391f0f32b
      data: null
  hints:
    - type: standard
      content: >-
        Analyze and tamper with links in the application that deliver a file
        directly.
      cost: 10
- name: DOM XSS
  description: >-
    Perform a <i>DOM</i> XSS attack with <code>&lt;iframe
    src="javascript:alert(&#x60;xss&#x60;)"&gt;</code>. (Difficulty Level: 1)
  max_attempts: 0
  value: 100
  category: XSS
  type: standard
  state: visible
  flags:
    - type: static
      content: 33c41ffa5b7ad8169c61c728183a3d15e330c822
      data: null
  hints:
    - type: standard
      content: >-
        Look for an input field where its content appears in the HTML when its
        form is submitted.
      cost: 10
- name: Database Schema
  description: >-
    Exfiltrate the entire DB schema definition via SQL Injection. (Difficulty
    Level: 3)
  max_attempts: 0
  value: 450
  category: Injection
  type: standard
  state: visible
  flags:
    - type: static
      content: 2d46b6c56985bfec422e9411365d1e109966a12a
      data: null
  hints:
    - type: standard
      content: >-
        Find out where this information could come from. Then craft a UNION
        SELECT attack string against an endpoint that offers an unnecessary way
        to filter data.
      cost: 45
- name: Deprecated Interface
  description: >-
    Use a deprecated B2B interface that was not properly shut down. (Difficulty
    Level: 2)
  max_attempts: 0
  value: 250
  category: Security Misconfiguration
  type: standard
  state: visible
  flags:
    - type: static
      content: 6d6fd830d0566bca67dadef22fe40b3c9dcb7614
      data: null
  hints:
    - type: standard
      content: >-
        The developers who disabled the interface think they could go invisible
        by just closing their eyes.
      cost: 25
- name: Easter Egg
  description: >-
    Find the hidden <a href="http://en.wikipedia.org/wiki/Easter_egg_(media)"
    target="_blank">easter egg</a>. (Difficulty Level: 4)
  max_attempts: 0
  value: 700
  category: Broken Access Control
  type: standard
  state: visible
  flags:
    - type: static
      content: d4094835da8e22715b615740043de8e462580056
      data: null
  hints:
    - type: standard
      content: >-
        If you solved one of the three file access challenges, you already know
        where to find the easter egg.
      cost: 70
- name: Email Leak
  description: >-
    Perform an unwanted information disclosure by accessing data cross-domain.
    (Difficulty Level: 5)
  max_attempts: 0
  value: 1000
  category: Sensitive Data Exposure
  type: standard
  state: visible
  flags:
    - type: static
      content: 9d06937788905bebf7984b471479059c3fadc751
      data: null
  hints:
    - type: standard
      content: >-
        Try to find and attack an endpoint that responds with user information.
        SQL Injection is not the solution here.
      cost: 100
- name: Ephemeral Accountant
  description: >-
    Log in with the (non-existing) accountant <i>acc0unt4nt@juice-sh.op</i>
    without ever registering that user. (Difficulty Level: 4)
  max_attempts: 0
  value: 700
  category: Injection
  type: standard
  state: visible
  flags:
    - type: static
      content: d5d580fa9306a26924694b28587dec337e11dfd3
      data: null
  hints:
    - type: standard
      content: Try to create the needed user "out of thin air".
      cost: 70
- name: Error Handling
  description: >-
    Provoke an error that is neither very gracefully nor consistently handled.
    (Difficulty Level: 1)
  max_attempts: 0
  value: 100
  category: Security Misconfiguration
  type: standard
  state: visible
  flags:
    - type: static
      content: 0c99f2f0eef4253c4bd6b3772af91cdd5cf159c7
      data: null
  hints:
    - type: standard
      content: >-
        Try to submit bad input to forms. Alternatively tamper with URL paths or
        parameters.
      cost: 10
- name: Expired Coupon
  description: 'Successfully redeem an expired campaign coupon code. (Difficulty Level: 4)'
  max_attempts: 0
  value: 700
  category: Improper Input Validation
  type: standard
  state: visible
  flags:
    - type: static
      content: d6008ba7622de2f0e75808ba2a6e3ff948055da3
      data: null
  hints:
    - type: standard
      content: >-
        Try to identify past special event or holiday campaigns of the shop
        first.
      cost: 70
- name: Extra Language
  description: >-
    Retrieve the language file that never made it into production. (Difficulty
    Level: 5)
  max_attempts: 0
  value: 1000
  category: Broken Anti Automation
  type: standard
  state: visible
  flags:
    - type: static
      content: d3fb5915d06bc87488a0473a0776ff2ed3e5b0c1
      data: null
  hints:
    - type: standard
      content: >-
        Brute force is not the only option for this challenge, but a perfectly
        viable one.
      cost: 100
- name: Five-Star Feedback
  description: 'Get rid of all 5-star customer feedback. (Difficulty Level: 2)'
  max_attempts: 0
  value: 250
  category: Broken Access Control
  type: standard
  state: visible
  flags:
    - type: static
      content: afe2f34ef7fcd2cf37463b85fa88c3622381c1da
      data: null
  hints:
    - type: standard
      content: >-
        Once you found admin section of the application, this challenge is
        almost trivial.
      cost: 25
- name: Forged Coupon
  description: >-
    Forge a coupon code that gives you a discount of at least 80%. (Difficulty
    Level: 6)
  max_attempts: 0
  value: 1350
  category: Cryptographic Issues
  type: standard
  state: visible
  flags:
    - type: static
      content: 35f67ac11a228dcf033f3a82bb7d048425726e17
      data: null
  hints:
    - type: standard
      content: >-
        Try either a) a knowledgable brute force attack or b) reverse
        engineering or c) some research in the cloud.
      cost: 135
- name: Forged Feedback
  description: 'Post some feedback in another users name. (Difficulty Level: 3)'
  max_attempts: 0
  value: 450
  category: Broken Access Control
  type: standard
  state: visible
  flags:
    - type: static
      content: 04e74982347c7abd812d6df0185bd801315148e3
      data: null
  hints:
    - type: standard
      content: >-
        You can solve this by tampering with the user interface or by
        intercepting the communication with the RESTful backend.
      cost: 45
- name: Forged Review
  description: >-
    Post a product review as another user or edit any user's existing review.
    (Difficulty Level: 3)
  max_attempts: 0
  value: 450
  category: Broken Access Control
  type: standard
  state: visible
  flags:
    - type: static
      content: 67e3fe44e29b41de379ff212a5a1adcb95276903
      data: null
  hints:
    - type: standard
      content: >-
        Observe the flow of product review posting and editing and see if you
        can exploit it.
      cost: 45
- name: Forged Signed JWT
  description: >-
    Forge an almost properly RSA-signed JWT token that impersonates the
    (non-existing) user <i>rsa_lord@juice-sh.op</i>. (Difficulty Level: 6)
  max_attempts: 0
  value: 1350
  category: Vulnerable Components
  type: standard
  state: visible
  flags:
    - type: static
      content: 3bf5e6d476c5b80e90c427b68b4d91bdc745385c
      data: null
  hints:
    - type: standard
      content: >-
        This challenge is explicitly not about acquiring the RSA private key
        used for JWT signing.
      cost: 135
- name: Forgotten Developer Backup
  description: 'Access a developer''s forgotten backup file. (Difficulty Level: 4)'
  max_attempts: 0
  value: 700
  category: Sensitive Data Exposure
  type: standard
  state: visible
  flags:
    - type: static
      content: 52c30a14a233e4ddb5a45b9e2737ed49682a8c3f
      data: null
  hints:
    - type: standard
      content: >-
        You need to trick a security mechanism into thinking that the file you
        want has a valid file type.
      cost: 70
- name: Forgotten Sales Backup
  description: 'Access a salesman''s forgotten backup file. (Difficulty Level: 4)'
  max_attempts: 0
  value: 700
  category: Sensitive Data Exposure
  type: standard
  state: visible
  flags:
    - type: static
      content: 758b4de72f37bb82d5b327f5fc4b617abecd3476
      data: null
  hints:
    - type: standard
      content: >-
        You need to trick a security mechanism into thinking that the file you
        want has a valid file type.
      cost: 70
- name: Frontend Typosquatting
  description: >-
    <a href="/#/contact">Inform the shop</a> about a <i>typosquatting</i>
    imposter that dug itself deep into the frontend. (Mention the exact name of
    the culprit) (Difficulty Level: 5)
  max_attempts: 0
  value: 1000
  category: Vulnerable Components
  type: standard
  state: visible
  flags:
    - type: static
      content: b22ae0ab870318a1eea623da7d68ad10ce4278bb
      data: null
  hints:
    - type: standard
      content: >-
        This challenge has nothing to do with mistyping web domains. There is no
        conveniently misplaced file helping you with this one either. Or is
        there?
      cost: 100
- name: GDPR Data Erasure
  description: 'Log in with Chris'' erased user account. (Difficulty Level: 3)'
  max_attempts: 0
  value: 450
  category: Broken Authentication
  type: standard
  state: visible
  flags:
    - type: static
      content: db6ba8f225072adf123c862f7c1957d4e18d45f2
      data: null
  hints:
    - type: standard
      content: >-
        Turns out that something is technically and legally wrong with the
        implementation of the "right to be forgotten" for users.
      cost: 45
- name: GDPR Data Theft
  description: >-
    Steal someone else's personal data without using Injection. (Difficulty
    Level: 4)
  max_attempts: 0
  value: 700
  category: Sensitive Data Exposure
  type: standard
  state: visible
  flags:
    - type: static
      content: 4fec91f68dadcf2b5590f48cce0b6b508b1b6318
      data: null
  hints:
    - type: standard
      content: >-
        Trick the regular Data Export to give you more than actually belongs to
        you.
      cost: 70
- name: HTTP-Header XSS
  description: >-
    Perform a <i>persisted</i> XSS attack with <code>&lt;iframe
    src="javascript:alert(&#x60;xss&#x60;)"&gt;</code> through an HTTP header.
    (Difficulty Level: 4)
  max_attempts: 0
  value: 700
  category: XSS
  type: standard
  state: visible
  flags:
    - type: static
      content: 913d225ab9a660873cbafbf803788fccac620929
      data: null
  hints:
    - type: standard
      content: >-
        Finding a piece of displayed information that could originate from an
        HTTP header is part of this challenge.
      cost: 70
- name: Imaginary Challenge
  description: >-
    Solve challenge #999. Unfortunately, this challenge does not exist.
    (Difficulty Level: 6)
  max_attempts: 0
  value: 1350
  category: Cryptographic Issues
  type: standard
  state: visible
  flags:
    - type: static
      content: 495bca5e22ba9e8b42cb20be90ae2545cc270f78
      data: null
  hints:
    - type: standard
      content: >-
        You need to trick the hacking progress persistence feature into thinking
        you solved challenge #999.
      cost: 135
- name: Leaked Access Logs
  description: >-
    Dumpster dive the Internet for a leaked password and log in to the original
    user account it belongs to. (Creating a new account with the same password
    does not qualify as a solution.) (Difficulty Level: 5)
  max_attempts: 0
  value: 1000
  category: Sensitive Data Exposure
  type: standard
  state: visible
  flags:
    - type: static
      content: 51e6dfae2eafedcbbc5b8f54b34bb92fc27e4cbf
      data: null
  hints:
    - type: standard
      content: >-
        Once you have it, a technique called "Password Spraying" might prove
        useful.
      cost: 100
- name: Leaked Unsafe Product
  description: >-
    Identify an unsafe product that was removed from the shop and <a
    href="/#/contact">inform the shop</a> which ingredients are dangerous.
    (Difficulty Level: 4)
  max_attempts: 0
  value: 700
  category: Sensitive Data Exposure
  type: standard
  state: visible
  flags:
    - type: static
      content: 9bbc2dc7fc7d3283cb1fd6ca7b4161cdba1e2332
      data: null
  hints:
    - type: standard
      content: >-
        Your own SQLi and someone else's Ctrl-V will be your accomplices in this
        challenge!
      cost: 70
- name: Legacy Typosquatting
  description: >-
    <a href="/#/contact">Inform the shop</a> about a <i>typosquatting</i> trick
    it has been a victim of at least in <code>v6.2.0-SNAPSHOT</code>. (Mention
    the exact name of the culprit) (Difficulty Level: 4)
  max_attempts: 0
  value: 700
  category: Vulnerable Components
  type: standard
  state: visible
  flags:
    - type: static
      content: e33e0da00aeff7c7cda28b93f64d9a3ec2182f00
      data: null
  hints:
    - type: standard
      content: >-
        This challenge has nothing to do with mistyping web domains. Investigate
        the forgotten developer's backup file instead.
      cost: 70
- name: Login Admin
  description: 'Log in with the administrator''s user account. (Difficulty Level: 2)'
  max_attempts: 0
  value: 250
  category: Injection
  type: standard
  state: visible
  flags:
    - type: static
      content: d46f637e667fda404449a69d5601364858cf7ae4
      data: null
  hints:
    - type: standard
      content: >-
        Try different SQL Injection attack patterns depending whether you know
        the admin's email address or not.
      cost: 25
- name: Login Amy
  description: >-
    Log in with Amy's original user credentials. (This could take 93.83 billion
    trillion trillion centuries to brute force, but luckily she did not read the
    "One Important Final Note") (Difficulty Level: 3)
  max_attempts: 0
  value: 450
  category: Sensitive Data Exposure
  type: standard
  state: visible
  flags:
    - type: static
      content: c5ff96fb4b3f064b0af0278ff389a670002276ce
      data: null
  hints:
    - type: standard
      content: This challenge will make you go after a needle in a haystack.
      cost: 45
- name: Login Bender
  description: 'Log in with Bender''s user account. (Difficulty Level: 3)'
  max_attempts: 0
  value: 450
  category: Injection
  type: standard
  state: visible
  flags:
    - type: static
      content: eb2b4b958614ae76fa20373c0aec02b94ea838ec
      data: null
  hints:
    - type: standard
      content: >-
        If you know Bender's email address, try SQL Injection. Bender's password
        hash might not help you very much.
      cost: 45
- name: Login Bjoern
  description: >-
    Log in with Bjoern's Gmail account <i>without</i> previously changing his
    password, applying SQL Injection, or hacking his Google account. (Difficulty
    Level: 4)
  max_attempts: 0
  value: 700
  category: Broken Authentication
  type: standard
  state: visible
  flags:
    - type: static
      content: 522f38debe8a82d1c398bf0a8a9a387d8b375e20
      data: null
  hints:
    - type: standard
      content: >-
        The security flaw behind this challenge is 100% OWASP Juice Shop's fault
        and 0% Google's.
      cost: 70
- name: Login Jim
  description: 'Log in with Jim''s user account. (Difficulty Level: 3)'
  max_attempts: 0
  value: 450
  category: Injection
  type: standard
  state: visible
  flags:
    - type: static
      content: 5702d104eb03ccdd087d1f227c53e68ae17b72ef
      data: null
  hints:
    - type: standard
      content: >-
        Try cracking Jim's password hash if you harvested it already.
        Alternatively, if you know Jim's email address, try SQL Injection.
      cost: 45
- name: Login MC SafeSearch
  description: >-
    Log in with MC SafeSearch's original user credentials without applying SQL
    Injection or any other bypass. (Difficulty Level: 2)
  max_attempts: 0
  value: 250
  category: Sensitive Data Exposure
  type: standard
  state: visible
  flags:
    - type: static
      content: 69d2102b004cfbf70597d627635ffdbce9923a8d
      data: null
  hints:
    - type: standard
      content: You should listen to MC's hit song "Protect Ya Passwordz".
      cost: 25
- name: Login Support Team
  description: >-
    Log in with the support team's original user credentials without applying
    SQL Injection or any other bypass. (Difficulty Level: 6)
  max_attempts: 0
  value: 1350
  category: Security Misconfiguration
  type: standard
  state: visible
  flags:
    - type: static
      content: d066cc9c655ac02f78746bd287aef2c24303bd57
      data: null
  hints:
    - type: standard
      content: >-
        The underlying flaw of this challenge is a lot more human error than
        technical weakness.
      cost: 135
- name: Manipulate Basket
  description: >-
    Put an additional product into another user's shopping basket. (Difficulty
    Level: 3)
  max_attempts: 0
  value: 450
  category: Broken Access Control
  type: standard
  state: visible
  flags:
    - type: static
      content: 5491dfdee0fe29bae64a5ff07f4c505332fbe821
      data: null
  hints:
    - type: standard
      content: >-
        Have an eye on the HTTP traffic while placing products in the shopping
        basket. Changing the quantity of products already in the basket doesn't
        count.
      cost: 45
- name: Misplaced Signature File
  description: >-
    Access a misplaced <a href="https://github.com/Neo23x0/sigma">SIEM
    signature</a> file. (Difficulty Level: 4)
  max_attempts: 0
  value: 700
  category: Sensitive Data Exposure
  type: standard
  state: visible
  flags:
    - type: static
      content: 9ddaa37e257717fccf9ddd15b16ff49fd593c285
      data: null
  hints:
    - type: standard
      content: >-
        You need to trick a security mechanism into thinking that the file you
        want has a valid file type.
      cost: 70
- name: Multiple Likes
  description: 'Like any review at least three times as the same user. (Difficulty Level: 6)'
  max_attempts: 0
  value: 1350
  category: Broken Anti Automation
  type: standard
  state: visible
  flags:
    - type: static
      content: d6ab6f9333976550e25ba75d5c7e3d58a90a7f30
      data: null
  hints:
    - type: standard
      content: Punctuality is the politeness of kings.
      cost: 135
- name: Nested Easter Egg
  description: >-
    Apply some advanced cryptanalysis to find <i>the real</i> easter egg.
    (Difficulty Level: 4)
  max_attempts: 0
  value: 700
  category: Cryptographic Issues
  type: standard
  state: visible
  flags:
    - type: static
      content: 325d803d0c7c7b7e57b079f29b325d54ce171930
      data: null
  hints:
    - type: standard
      content: >-
        You might have to peel through several layers of tough-as-nails
        encryption for this challenge.
      cost: 70
- name: NoSQL DoS
  description: >-
    Let the server sleep for some time. (It has done more than enough hard work
    for you) (Difficulty Level: 4)
  max_attempts: 0
  value: 700
  category: Injection
  type: standard
  state: visible
  flags:
    - type: static
      content: e8608ecb9ad099bfbe4dffe327bf3878b1ae3a63
      data: null
  hints:
    - type: standard
      content: >-
        This challenge is essentially a stripped-down Denial of Service (DoS)
        attack.
      cost: 70
- name: NoSQL Exfiltration
  description: >-
    All your orders are belong to us! Even the ones which don't. (Difficulty
    Level: 5)
  max_attempts: 0
  value: 1000
  category: Injection
  type: standard
  state: visible
  flags:
    - type: static
      content: 3e0420d99b91befadff0d4ed1aef2b3b848bc4d6
      data: null
  hints:
    - type: standard
      content: Take a close look on how the $where query operator works in MongoDB.
      cost: 100
- name: NoSQL Manipulation
  description: 'Update multiple product reviews at the same time. (Difficulty Level: 4)'
  max_attempts: 0
  value: 700
  category: Injection
  type: standard
  state: visible
  flags:
    - type: static
      content: f4a139ffb7a09bdccebcd38cb718e1db067fda88
      data: null
  hints:
    - type: standard
      content: >-
        Take a close look on how the equivalent of UPDATE-statements in MongoDB
        work.
      cost: 70
- name: Outdated Allowlist
  description: >-
    Let us redirect you to one of our crypto currency addresses which are not
    promoted any longer. (Difficulty Level: 1)
  max_attempts: 0
  value: 100
  category: Unvalidated Redirects
  type: standard
  state: visible
  flags:
    - type: static
      content: 4deb99d1f44eef0c5c5a5fb86f4eff86770db272
      data: null
  hints:
    - type: standard
      content: We might have failed to take this out of our code properly.
      cost: 10
- name: Password Strength
  description: >-
    Log in with the administrator's user credentials without previously changing
    them or applying SQL Injection. (Difficulty Level: 2)
  max_attempts: 0
  value: 250
  category: Broken Authentication
  type: standard
  state: visible
  flags:
    - type: static
      content: 8d587f641961bf93dc19af65194a955685c3b376
      data: null
  hints:
    - type: standard
      content: >-
        This one should be equally easy to a) brute force, b) crack the password
        hash or c) simply guess.
      cost: 25
- name: Payback Time
  description: 'Place an order that makes you rich. (Difficulty Level: 3)'
  max_attempts: 0
  value: 450
  category: Improper Input Validation
  type: standard
  state: visible
  flags:
    - type: static
      content: 6b5b3368725ac489cdca37114e01c4eba27565b6
      data: null
  hints:
    - type: standard
      content: You literally need to make the shop owe you any amount of money.
      cost: 45
- name: Premium Paywall
  description: >-
    <i class="far fa-gem"></i><i class="far fa-gem"></i><i class="far
    fa-gem"></i><i class="far fa-gem"></i><i class="far
    fa-gem"></i><!--IvLuRfBJYlmStf9XfL6ckJFngyd9LfV1JaaN/KRTPQPidTuJ7FR+D/nkWJUF+0xUF07CeCeqYfxq+OJVVa0gNbqgYkUNvn//UbE7e95C+6e+7GtdpqJ8mqm4WcPvUGIUxmGLTTAC2+G9UuFCD1DUjg==-->
    <a href="https://blockchain.info/address/1AbKfgvw9psQ41NbLi8kufDQTezwG8DRZm"
    target="_blank"><i class="fab fa-btc fa-sm"></i> Unlock Premium
    Challenge</a> to access exclusive content. (Difficulty Level: 6)
  max_attempts: 0
  value: 1350
  category: Cryptographic Issues
  type: standard
  state: visible
  flags:
    - type: static
      content: b886b15406350a2518565532036f070a619970e0
      data: null
  hints:
    - type: standard
      content: >-
        You do not have to pay anything to unlock this challenge! Nonetheless,
        donations are very much appreciated.
      cost: 135
- name: Privacy Policy
  description: 'Read our privacy policy. (Difficulty Level: 1)'
  max_attempts: 0
  value: 100
  category: Miscellaneous
  type: standard
  state: visible
  flags:
    - type: static
      content: 994a28272cd1f10f20662b782cbd50f32353fd6b
      data: null
  hints:
    - type: standard
      content: >-
        We won't even ask you to confirm that you did. Just read it. Please.
        Pretty please.
      cost: 10
- name: Privacy Policy Inspection
  description: 'Prove that you actually read our privacy policy. (Difficulty Level: 3)'
  max_attempts: 0
  value: 450
  category: Security through Obscurity
  type: standard
  state: visible
  flags:
    - type: static
      content: 8ced6fe58657d022b13e57f2ff60d7a1fd384172
      data: null
  hints:
    - type: standard
      content: >-
        Only by visiting a special URL you can confirm that you read it
        carefully.
      cost: 45
- name: Product Tampering
  description: >-
    Change the <code>href</code> of the link within the <a
    href="/#/search?q=OWASP SSL Advanced Forensic Tool (O-Saft)">OWASP SSL
    Advanced Forensic Tool (O-Saft)</a> product description into
    <i>https://owasp.slack.com</i>. (Difficulty Level: 3)
  max_attempts: 0
  value: 450
  category: Broken Access Control
  type: standard
  state: visible
  flags:
    - type: static
      content: fa6c8ae7dae45687753d961ba3ad7d1e84be159f
      data: null
  hints:
    - type: standard
      content: >-
        Look for one of the following: a) broken admin functionality, b) holes
        in RESTful API or c) possibility for SQL Injection.
      cost: 45
- name: Reflected XSS
  description: >-
    Perform a <i>reflected</i> XSS attack with <code>&lt;iframe
    src="javascript:alert(&#x60;xss&#x60;)"&gt;</code>. (Difficulty Level: 2)
  max_attempts: 0
  value: 250
  category: XSS
  type: standard
  state: visible
  flags:
    - type: static
      content: 9e578a1bb3560f2806fa5477aa82931def492627
      data: null
  hints:
    - type: standard
      content: >-
        Look for a url parameter where its value appears in the page it is
        leading to.
      cost: 25
- name: Repetitive Registration
  description: 'Follow the DRY principle while registering a user. (Difficulty Level: 1)'
  max_attempts: 0
  value: 100
  category: Improper Input Validation
  type: standard
  state: visible
  flags:
    - type: static
      content: bce6afda30f665eb55d8130e6c4974fd892837f0
      data: null
  hints:
    - type: standard
      content: >-
        You can solve this by cleverly interacting with the UI or bypassing it
        altogether.
      cost: 10
- name: Reset Bender's Password
  description: >-
    Reset Bender's password via the <a href="/#/forgot-password">Forgot
    Password</a> mechanism with <i>the original answer</i> to his security
    question. (Difficulty Level: 4)
  max_attempts: 0
  value: 700
  category: Broken Authentication
  type: standard
  state: visible
  flags:
    - type: static
      content: 16f4c5279f177ed30a2662ed4970d891530d38e6
      data: null
  hints:
    - type: standard
      content: >-
        Not as trivial as Jim's but still not too difficult with some "Futurama"
        background knowledge.
      cost: 70
- name: Reset Bjoern's Password
  description: >-
    Reset the password of Bjoern's internal account via the <a
    href="/#/forgot-password">Forgot Password</a> mechanism with <i>the original
    answer</i> to his security question. (Difficulty Level: 5)
  max_attempts: 0
  value: 1000
  category: Broken Authentication
  type: standard
  state: visible
  flags:
    - type: static
      content: b13072b84b49d12ca1dae2ecaec3a1d16c08008f
      data: null
  hints:
    - type: standard
      content: >-
        Nothing a little bit of Facebook stalking couldn't reveal. Might involve
        a historical twist.
      cost: 100
- name: Reset Jim's Password
  description: >-
    Reset Jim's password via the <a href="/#/forgot-password">Forgot
    Password</a> mechanism with <i>the original answer</i> to his security
    question. (Difficulty Level: 3)
  max_attempts: 0
  value: 450
  category: Broken Authentication
  type: standard
  state: visible
  flags:
    - type: static
      content: 51000f49cdd49cffd7af1544bf84953034fec628
      data: null
  hints:
    - type: standard
      content: >-
        It's hard for celebrities to pick a security question from a hard-coded
        list where the answer is not publicly exposed.
      cost: 45
- name: Reset Morty's Password
  description: >-
    Reset Morty's password via the <a href="/#/forgot-password">Forgot
    Password</a> mechanism with <i>his obfuscated answer</i> to his security
    question. (Difficulty Level: 5)
  max_attempts: 0
  value: 1000
  category: Broken Anti Automation
  type: standard
  state: visible
  flags:
    - type: static
      content: cffda50483f084211993ae960f3550c8e8220e56
      data: null
  hints:
    - type: standard
      content: >-
        Find a way to bypass the rate limiting and brute force the obfuscated
        answer to Morty's security question.
      cost: 100
- name: Retrieve Blueprint
  description: >-
    Deprive the shop of earnings by downloading the blueprint for one of its
    products. (Difficulty Level: 5)
  max_attempts: 0
  value: 1000
  category: Sensitive Data Exposure
  type: standard
  state: visible
  flags:
    - type: static
      content: c478e9f45a5e9b61bc09f70b1dc0afa8fab79e6d
      data: null
  hints:
    - type: standard
      content: >-
        The product you might want to give a closer look is the OWASP Juice Shop
        Logo (3D-printed).
      cost: 100
- name: SSRF
  description: 'Request a hidden resource on server through server. (Difficulty Level: 6)'
  max_attempts: 0
  value: 1350
  category: Broken Access Control
  type: standard
  state: visible
  flags:
    - type: static
      content: 5ee2ca2a758980cc2a752e14af0e3c12946bb050
      data: null
  hints:
    - type: standard
      content: Reverse engineering something bad can make good things happen.
      cost: 135
- name: SSTi
  description: >-
    Infect the server with juicy malware by abusing arbitrary command execution.
    (Difficulty Level: 6)
  max_attempts: 0
  value: 1350
  category: Injection
  type: standard
  state: visible
  flags:
    - type: static
      content: cd6052c443a1248013783eae3ec46394a0f0c96b
      data: null
  hints:
    - type: standard
      content: >-
        "SSTi" is a clear indicator that this has nothing to do with anything
        Angular. Also, make sure to use only our non-malicious malware.
      cost: 135
- name: Score Board
  description: 'Find the carefully hidden ''Score Board'' page. (Difficulty Level: 1)'
  max_attempts: 0
  value: 100
  category: Miscellaneous
  type: standard
  state: visible
  flags:
    - type: static
      content: e6987b034806f81d607f6e06dce7b18b1c0340e7
      data: null
  hints:
    - type: standard
      content: >-
        Try to find a reference or clue behind the scenes. Or simply guess what
        URL the Score Board might have.
      cost: 10
- name: Security Policy
  description: >-
    Behave like any "white-hat" should before getting into the action.
    (Difficulty Level: 2)
  max_attempts: 0
  value: 250
  category: Miscellaneous
  type: standard
  state: visible
  flags:
    - type: static
      content: db89ee4b06a994a6db12653f2f4deaf4fbaa2326
      data: null
  hints:
    - type: standard
      content: >-
        Undoubtably you want to read our security policy before conducting any
        research on our application.
      cost: 25
- name: Server-side XSS Protection
  description: >-
    Perform a <i>persisted</i> XSS attack with <code>&lt;iframe
    src="javascript:alert(&#x60;xss&#x60;)"&gt;</code> bypassing a
    <i>server-side</i> security mechanism. (Difficulty Level: 4)
  max_attempts: 0
  value: 700
  category: XSS
  type: standard
  state: visible
  flags:
    - type: static
      content: 1a8ecb17b9b20d714e8f09f7ebeb5ed8cc7bf799
      data: null
  hints:
    - type: standard
      content: >-
        The "Comment" field in the "Customer Feedback" screen is where you want
        to put your focus on.
      cost: 70
- name: Steganography
  description: >-
    <a href="/#/contact">Rat out</a> a notorious character hiding in plain sight
    in the shop. (Mention the exact name of the character) (Difficulty Level: 4)
  max_attempts: 0
  value: 700
  category: Security through Obscurity
  type: standard
  state: visible
  flags:
    - type: static
      content: 4eb3bfa1fa7486e0b0862b5a573820c7c00e2628
      data: null
  hints:
    - type: standard
      content: >-
        No matter how good your eyes are, you will need tool assistance for this
        challenge.
      cost: 70
- name: Successful RCE DoS
  description: >-
    Perform a Remote Code Execution that occupies the server for a while without
    using infinite loops. (Difficulty Level: 6)
  max_attempts: 0
  value: 1350
  category: Insecure Deserialization
  type: standard
  state: visible
  flags:
    - type: static
      content: 2bfcd14ae83589c3ed47dda1ec4b3a5081afba20
      data: null
  hints:
    - type: standard
      content: >-
        Your attack payload must not trigger the protection against too many
        iterations.
      cost: 135
- name: Supply Chain Attack
  description: >-
    <a href="/#/contact">Inform the development team</a> about a danger to some
    of <em>their</em> credentials. (Send them the URL of the <em>original
    report</em> or an assigned CVE or another identifier of this vulnerability)
    (Difficulty Level: 5)
  max_attempts: 0
  value: 1000
  category: Vulnerable Components
  type: standard
  state: visible
  flags:
    - type: static
      content: d02cf82e367be5b07c137d715d614b16e239956a
      data: null
  hints:
    - type: standard
      content: >-
        This vulnerability will not affect any customer of the shop. It is aimed
        exclusively at its developers.
      cost: 100
- name: Two Factor Authentication
  description: >-
    Solve the 2FA challenge for user "wurstbrot". (Disabling, bypassing or
    overwriting his 2FA settings does not count as a solution) (Difficulty
    Level: 5)
  max_attempts: 0
  value: 1000
  category: Broken Authentication
  type: standard
  state: visible
  flags:
    - type: static
      content: 345546b41e9638ba1c558fd986195ed00c298ecc
      data: null
  hints:
    - type: standard
      content: >-
        The 2FA implementation requires to store a secret for every user. You
        will need to find a way to access this secret in order to solve this
        challenge.
      cost: 100
- name: Unsigned JWT
  description: >-
    Forge an essentially unsigned JWT token that impersonates the (non-existing)
    user <i>jwtn3d@juice-sh.op</i>. (Difficulty Level: 5)
  max_attempts: 0
  value: 1000
  category: Vulnerable Components
  type: standard
  state: visible
  flags:
    - type: static
      content: 3fb4af8267af10c9ce253c6af5ccc0f247c0690b
      data: null
  hints:
    - type: standard
      content: >-
        This challenge exploits a weird option that is supported when signing
        tokens with JWT.
      cost: 100
- name: Upload Size
  description: 'Upload a file larger than 100 kB. (Difficulty Level: 3)'
  max_attempts: 0
  value: 450
  category: Improper Input Validation
  type: standard
  state: visible
  flags:
    - type: static
      content: 13f98437f21ae95ba764b826013dd6d52b2c6b65
      data: null
  hints:
    - type: standard
      content: >-
        You can attach a small file to the "Complaint" form. Investigate how
        this upload actually works.
      cost: 45
- name: Upload Type
  description: 'Upload a file that has no .pdf or .zip extension. (Difficulty Level: 3)'
  max_attempts: 0
  value: 450
  category: Improper Input Validation
  type: standard
  state: visible
  flags:
    - type: static
      content: d9fa032d9a75818e5805e1e1e34aaced5e9bf652
      data: null
  hints:
    - type: standard
      content: >-
        You can attach a PDF or ZIP file to the "Complaint" form. Investigate
        how this upload actually works.
      cost: 45
- name: User Credentials
  description: >-
    Retrieve a list of all user credentials via SQL Injection. (Difficulty
    Level: 4)
  max_attempts: 0
  value: 700
  category: Injection
  type: standard
  state: visible
  flags:
    - type: static
      content: 8f2d2092298dc3d49f6858ec1d73cdea3238c128
      data: null
  hints:
    - type: standard
      content: >-
        Gather information on where user data is stored and how it is addressed.
        Then craft a corresponding UNION SELECT attack.
      cost: 70
- name: Video XSS
  description: >-
    Embed an XSS payload
    <code>&lt;/script&gt;&lt;script&gt;alert(&#x60;xss&#x60;)&lt;/script&gt;</code>
    into our promo video. (Difficulty Level: 6)
  max_attempts: 0
  value: 1350
  category: XSS
  type: standard
  state: visible
  flags:
    - type: static
      content: 0b81eab920f82e51e68a3d91199f795d064a471a
      data: null
  hints:
    - type: standard
      content: >-
        You have to reuse the vulnerability behind one other 6-star challenge to
        be able to solve this one.
      cost: 135
- name: View Basket
  description: 'View another user''s shopping basket. (Difficulty Level: 2)'
  max_attempts: 0
  value: 250
  category: Broken Access Control
  type: standard
  state: visible
  flags:
    - type: static
      content: 5892b807a17c255d0d41e93128b4aea89338fbe3
      data: null
  hints:
    - type: standard
      content: >-
        Have an eye on the HTTP traffic while shopping. Alternatively try to
        find a client-side association of users to their basket.
      cost: 25
- name: Vulnerable Library
  description: >-
    <a href="/#/contact">Inform the shop</a> about a vulnerable library it is
    using. (Mention the exact library name and version in your comment)
    (Difficulty Level: 4)
  max_attempts: 0
  value: 700
  category: Vulnerable Components
  type: standard
  state: visible
  flags:
    - type: static
      content: ca3e5926d87fc3f119e1a9302f541b42b4e88b19
      data: null
  hints:
    - type: standard
      content: >-
        Report one of two possible answers via the "Customer Feedback" form. Do
        not forget to submit the library's version as well.
      cost: 70
- name: Weird Crypto
  description: >-
    <a href="/#/contact">Inform the shop</a> about an algorithm or library it
    should definitely not use the way it does. (Difficulty Level: 2)
  max_attempts: 0
  value: 250
  category: Cryptographic Issues
  type: standard
  state: visible
  flags:
    - type: static
      content: c4b19a4eeae582301a19413c3b13a9e5c322409f
      data: null
  hints:
    - type: standard
      content: Report one of four possible answers via the "Customer Feedback" form.
      cost: 25
- name: Allowlist Bypass
  description: >-
    Enforce a redirect to a page you are not supposed to redirect to.
    (Difficulty Level: 4)
  max_attempts: 0
  value: 700
  category: Unvalidated Redirects
  type: standard
  state: visible
  flags:
    - type: static
      content: b5b507f929c33070284975c0266e51c71b54dcc2
      data: null
  hints:
    - type: standard
      content: You have to find a way to beat the allowlist of allowed redirect URLs.
      cost: 70
- name: XXE Data Access
  description: >-
    Retrieve the content of <code>C:\Windows\system.ini</code> or
    <code>/etc/passwd</code> from the server. (Difficulty Level: 3)
  max_attempts: 0
  value: 450
  category: XXE
  type: standard
  state: visible
  flags:
    - type: static
      content: 99ecb6c5af0ac1caf0e854f4de0511772281c4a0
      data: null
  hints:
    - type: standard
      content: The leverage point for this challenge is the deprecated B2B interface.
      cost: 45
- name: XXE DoS
  description: >-
    Give the server something to chew on for quite a while. (Difficulty Level:
    5)
  max_attempts: 0
  value: 1000
  category: XXE
  type: standard
  state: visible
  flags:
    - type: static
      content: dad8e133f55df9032149740587eab085b5b03c78
      data: null
  hints:
    - type: standard
      content: >-
        It is not as easy as sending a large amount of data directly to the
        deprecated B2B interface.
      cost: 100
- name: Zero Stars
  description: 'Give a devastating zero-star feedback to the store. (Difficulty Level: 1)'
  max_attempts: 0
  value: 100
  category: Improper Input Validation
  type: standard
  state: visible
  flags:
    - type: static
      content: bfbc582993a70ce59b7298171e84ebd8e61bfa5a
      data: null
  hints:
    - type: standard
      content: >-
        Before you invest time bypassing the API, you might want to play around
        with the UI a bit.
      cost: 10
- name: Missing Encoding
  description: >-
    Retrieve the photo of Bjoern's cat in "melee combat-mode". (Difficulty
    Level: 1)
  max_attempts: 0
  value: 100
  category: Improper Input Validation
  type: standard
  state: visible
  flags:
    - type: static
      content: b70fc34448252dd46e958d56b279ac1d1e08aac4
      data: null
  hints:
    - type: standard
      content: Check the Photo Wall for an image that could not be loaded correctly.
      cost: 10
- name: Cross-Site Imaging
  description: >-
    Stick <a href="http://placekitten.com/" target="_blank">cute cross-domain
    kittens</a> all over our delivery boxes. (Difficulty Level: 5)
  max_attempts: 0
  value: 1000
  category: Security Misconfiguration
  type: standard
  state: visible
  flags:
    - type: static
      content: 1ac871e5048a25ade9f328135b8e70471ca7d347
      data: null
  hints:
    - type: standard
      content: >-
        This challenge would formally have to be in several categories as the
        developers made multiple gaffes for this to be possible.
      cost: 100
- name: Exposed Metrics
  description: >-
    Find the endpoint that serves usage data to be scraped by a <a
    href="https://github.com/prometheus/prometheus">popular monitoring
    system</a>. (Difficulty Level: 1)
  max_attempts: 0
  value: 100
  category: Sensitive Data Exposure
  type: standard
  state: visible
  flags:
    - type: static
      content: a845bb09c891795d34d799f7a3e7ebfe4cb21ec2
      data: null
  hints:
    - type: standard
      content: Try to guess what URL the endpoint might have.
      cost: 10
- name: Deluxe Fraud
  description: 'Obtain a Deluxe Membership without paying for it. (Difficulty Level: 3)'
  max_attempts: 0
  value: 450
  category: Improper Input Validation
  type: standard
  state: visible
  flags:
    - type: static
      content: 2cf8085560384fd902d4e49c0dd393bf0f2233bb
      data: null
  hints:
    - type: standard
      content: Look closely at what happens when you attempt to upgrade your account.
      cost: 45
- name: CSRF
  description: >-
    Change the name of a user by performing Cross-Site Request Forgery from <a
    href="http://htmledit.squarefree.com">another origin</a>. (Difficulty Level:
    3)
  max_attempts: 0
  value: 450
  category: Broken Access Control
  type: standard
  state: visible
  flags:
    - type: static
      content: ae52a2d6ceaba51dac00d448464f4c549f44b53f
      data: null
  hints:
    - type: standard
      content: >-
        Find a form which updates the username and then construct a malicious
        page in the online HTML editor.
      cost: 45
- name: Bonus Payload
  description: >-
    Use the bonus payload <code>&lt;iframe width=&quot;100%&quot;
    height=&quot;166&quot; scrolling=&quot;no&quot; frameborder=&quot;no&quot;
    allow=&quot;autoplay&quot;
    src=&quot;https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/771984076&amp;color=%23ff5500&amp;auto_play=true&amp;hide_related=false&amp;show_comments=true&amp;show_user=true&amp;show_reposts=false&amp;show_teaser=true&quot;&gt;&lt;/iframe&gt;</code>
    in the <i>DOM XSS</i> challenge. (Difficulty Level: 1)
  max_attempts: 0
  value: 100
  category: XSS
  type: standard
  state: visible
  flags:
    - type: static
      content: 1b88f8c91c86ebf40166a29280b211c6dcd0584d
      data: null
  hints:
    - type: standard
      content: Copy + Paste = Solved!
      cost: 10
- name: Reset Uvogin's Password
  description: >-
    Reset Uvogin's password via the <a href="/#/forgot-password">Forgot
    Password</a> mechanism with <i>the original answer</i> to his security
    question. (Difficulty Level: 4)
  max_attempts: 0
  value: 700
  category: Sensitive Data Exposure
  type: standard
  state: visible
  flags:
    - type: static
      content: 697c432294cc3219e8beba77b113bc2b6518492b
      data: null
  hints:
    - type: standard
      content: >-
        You might have to do some OSINT on his social media personas to find out
        his honest answer to the security question.
      cost: 70
- name: Meta Geo Stalking
  description: >-
    Determine the answer to John's security question by looking at an upload of
    him to the Photo Wall and use it to reset his password via the <a
    href="/#/forgot-password">Forgot Password</a> mechanism. (Difficulty Level:
    2)
  max_attempts: 0
  value: 250
  category: Sensitive Data Exposure
  type: standard
  state: visible
  flags:
    - type: static
      content: 97f58a56411ea2b7ce3e0cc7ce7d1c34b1d14d33
      data: null
  hints:
    - type: standard
      content: Take a look at the meta data of the corresponding photo.
      cost: 25
- name: Visual Geo Stalking
  description: >-
    Determine the answer to Emma's security question by looking at an upload of
    her to the Photo Wall and use it to reset her password via the <a
    href="/#/forgot-password">Forgot Password</a> mechanism. (Difficulty Level:
    2)
  max_attempts: 0
  value: 250
  category: Sensitive Data Exposure
  type: standard
  state: visible
  flags:
    - type: static
      content: 56238f1f462711839db2b80dd62773efd35e2add
      data: null
  hints:
    - type: standard
      content: >-
        Take a look at the details in the photo to determine the location of
        where it was taken.
      cost: 25
- name: Kill Chatbot
  description: >-
    Permanently disable the support chatbot so that it can no longer answer
    customer queries. (Difficulty Level: 5)
  max_attempts: 0
  value: 1000
  category: Vulnerable Components
  type: standard
  state: visible
  flags:
    - type: static
      content: 7b24d83047a041f04d1e74f5c8b40a2e1ec26ad4
      data: null
  hints:
    - type: standard
      content: >-
        Think of a way to get a hold of the internal workings on the chatbot
        API.
      cost: 100
- name: Poison Null Byte
  description: >-
    Bypass a security control with a <a
    href="http://hakipedia.com/index.php/Poison_Null_Byte">Poison Null Byte</a>
    to access a file not meant for your eyes. (Difficulty Level: 4)
  max_attempts: 0
  value: 700
  category: Improper Input Validation
  type: standard
  state: visible
  flags:
    - type: static
      content: 29ecce3ea738be7b8cb215b0c239aece25fcd37d
      data: null
  hints:
    - type: standard
      content: >-
        Take a look at the details in the photo to determine the location of
        where it was taken.
      cost: 70
- name: Bully Chatbot
  description: 'Receive a coupon code from the support chatbot. (Difficulty Level: 1)'
  max_attempts: 0
  value: 100
  category: Miscellaneous
  type: standard
  state: visible
  flags:
    - type: static
      content: 2c812bee7ce7f6a60eaf1e858b27196b3bee4cb4
      data: null
  hints:
    - type: standard
      content: Just keep asking.
      cost: 10
- name: Local File Read
  description: >-
    Gain read access to an arbitrary local file on the web server. (Difficulty
    Level: 5)
  max_attempts: 0
  value: 1000
  category: Vulnerable Components
  type: standard
  state: visible
  flags:
    - type: static
      content: 2e6d9f504554e436aa56a701c7636448fb357c1f
      data: null
  hints:
    - type: standard
      content: >-
        You should read up on vulnerabilities in popular NodeJs template
        engines.
      cost: 100
