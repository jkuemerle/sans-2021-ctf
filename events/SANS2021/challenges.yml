- name: API-only XSS
  description: >-
    Perform a <i>persisted</i> XSS attack with <code>&lt;iframe
    src="javascript:alert(&#x60;xss&#x60;)"&gt;</code> without using the
    frontend application at all. (Difficulty Level: 3)
  max_attempts: 0
  value: 450
  category: XSS
  type: standard
  state: visible
  flags:
    - type: static
      content: c650991c76f7afd8ce2459289ae86d9b4eada302
      data: null
  hints:
    - type: standard
      content: >-
        You need to work with the server-side API directly. Try different HTTP
        verbs on different entities exposed through the API.
      cost: 45
- name: Access Log
  description: 'Gain access to any access log file of the server. (Difficulty Level: 4)'
  max_attempts: 0
  value: 700
  category: Sensitive Data Exposure
  type: standard
  state: visible
  flags:
    - type: static
      content: 6077a96dfbe3061c5a99c31603f169d1bad4d69d
      data: null
  hints:
    - type: standard
      content: >-
        Who would want a server access log to be accessible through a web
        application?
      cost: 70
- name: Admin Registration
  description: 'Register as a user with administrator privileges. (Difficulty Level: 3)'
  max_attempts: 0
  value: 450
  category: Improper Input Validation
  type: standard
  state: visible
  flags:
    - type: static
      content: 7447b907c3404bb681aef3270c587372c5c40bb0
      data: null
  hints:
    - type: standard
      content: You have to assign the unassignable.
      cost: 45
- name: Admin Section
  description: 'Access the administration section of the store. (Difficulty Level: 2)'
  max_attempts: 0
  value: 250
  category: Broken Access Control
  type: standard
  state: visible
  flags:
    - type: static
      content: 9888884229222e71add186109df8cfb4025076ec
      data: null
  hints:
    - type: standard
      content: It is just slightly harder to find than the score board link.
      cost: 25
- name: Arbitrary File Write
  description: >-
    Overwrite the <a href="/ftp/legal.md">Legal Information</a> file.
    (Difficulty Level: 6)
  max_attempts: 0
  value: 1350
  category: Vulnerable Components
  type: standard
  state: visible
  flags:
    - type: static
      content: 8c5c53fe5e0772aa39537c0beff753715342c4b7
      data: null
  hints:
    - type: standard
      content: >-
        Look out for a tweet praising new functionality of the web shop. Then
        find a third party vulnerability associated with it.
      cost: 135
- name: Bjoern's Favorite Pet
  description: >-
    Reset the password of Bjoern's OWASP account via the <a
    href="/#/forgot-password">Forgot Password</a> mechanism with <i>the original
    answer</i> to his security question. (Difficulty Level: 3)
  max_attempts: 0
  value: 450
  category: Broken Authentication
  type: standard
  state: visible
  flags:
    - type: static
      content: c41596f822493e6c7616d6887ec60df20041567a
      data: null
  hints:
    - type: standard
      content: >-
        He might have spoilered it on at least one occasion where a camera was
        running. Maybe elsewhere as well.
      cost: 45
- name: Blockchain Hype
  description: >-
    Learn about the Token Sale before its official announcement. (Difficulty
    Level: 5)
  max_attempts: 0
  value: 1000
  category: Security through Obscurity
  type: standard
  state: visible
  flags:
    - type: static
      content: b58df2b3cc8a44c2cce2345936be939d73c8f92e
      data: null
  hints:
    - type: standard
      content: >-
        The developers truly believe in "Security through Obscurity" over actual
        access restrictions.
      cost: 100
- name: Blocked RCE DoS
  description: >-
    Perform a Remote Code Execution that would keep a less hardened application
    busy <em>forever</em>. (Difficulty Level: 5)
  max_attempts: 0
  value: 1000
  category: Insecure Deserialization
  type: standard
  state: visible
  flags:
    - type: static
      content: fce44f02cee0511239a68c2ece7a47e10ecfed0e
      data: null
  hints:
    - type: standard
      content: >-
        The feature you need to exploit for this challenge is not directly
        advertised anywhere.
      cost: 100
- name: CAPTCHA Bypass
  description: >-
    Submit 10 or more customer feedbacks within 10 seconds. (Difficulty Level:
    3)
  max_attempts: 0
  value: 450
  category: Broken Anti Automation
  type: standard
  state: visible
  flags:
    - type: static
      content: 2ecf9ffa89aa5e0a7e6a9f815383c53bad36cfb6
      data: null
  hints:
    - type: standard
      content: >-
        After finding a CAPTCHA bypass, write a script that automates feedback
        submission. Or open many browser tabs and be really quick.
      cost: 45
- name: Change Bender's Password
  description: >-
    Change Bender's password into <i>slurmCl4ssic</i> without using SQL
    Injection or Forgot Password. (Difficulty Level: 5)
  max_attempts: 0
  value: 1000
  category: Broken Authentication
  type: standard
  state: visible
  flags:
    - type: static
      content: 125569cdece65332a80c06e0c3c742797333743e
      data: null
  hints:
    - type: standard
      content: >-
        In previous releases this challenge was wrongly accused of being based
        on CSRF.
      cost: 100
- name: Christmas Special
  description: 'Order the Christmas special offer of 2014. (Difficulty Level: 4)'
  max_attempts: 0
  value: 700
  category: Injection
  type: standard
  state: visible
  flags:
    - type: static
      content: 5e57911953326e39c82b49321482f5c1945173ea
      data: null
  hints:
    - type: standard
      content: >-
        Find out how the application handles unavailable products and try to
        find a loophole.
      cost: 70
- name: CSP Bypass
  description: >-
    Bypass the Content Security Policy and perform an XSS attack with
    <code>&lt;script&gt;alert(&#x60;xss&#x60;)&lt;/script&gt;</code> on a legacy
    page within the application. (Difficulty Level: 4)
  max_attempts: 0
  value: 700
  category: XSS
  type: standard
  state: visible
  flags:
    - type: static
      content: 7da524cdb4f591f8298108d4e78fd8bb3e72b2cd
      data: null
  hints:
    - type: standard
      content: >-
        What is even "better" than a legacy page with a homegrown RegEx
        sanitizer? Having CSP injection issues on the exact same page as well!
      cost: 70
- name: Client-side XSS Protection
  description: >-
    Perform a <i>persisted</i> XSS attack with <code>&lt;iframe
    src="javascript:alert(&#x60;xss&#x60;)"&gt;</code> bypassing a
    <i>client-side</i> security mechanism. (Difficulty Level: 3)
  max_attempts: 0
  value: 450
  category: XSS
  type: standard
  state: visible
  flags:
    - type: static
      content: db6efa463a28ef83c074f99fe1cc5c223217391b
      data: null
  hints:
    - type: standard
      content: >-
        Only some input fields validate their input. Even less of these are
        persisted in a way where their content is shown on another screen.
      cost: 45
- name: Confidential Document
  description: 'Access a confidential document. (Difficulty Level: 1)'
  max_attempts: 0
  value: 100
  category: Sensitive Data Exposure
  type: standard
  state: visible
  flags:
    - type: static
      content: af27e51f331a9940e058a3e761dd79701abddafa
      data: null
  hints:
    - type: standard
      content: >-
        Analyze and tamper with links in the application that deliver a file
        directly.
      cost: 10
- name: DOM XSS
  description: >-
    Perform a <i>DOM</i> XSS attack with <code>&lt;iframe
    src="javascript:alert(&#x60;xss&#x60;)"&gt;</code>. (Difficulty Level: 1)
  max_attempts: 0
  value: 100
  category: XSS
  type: standard
  state: visible
  flags:
    - type: static
      content: 458b9ef793dc4460c74f53d317b76eba59ce0174
      data: null
  hints:
    - type: standard
      content: >-
        Look for an input field where its content appears in the HTML when its
        form is submitted.
      cost: 10
- name: Database Schema
  description: >-
    Exfiltrate the entire DB schema definition via SQL Injection. (Difficulty
    Level: 3)
  max_attempts: 0
  value: 450
  category: Injection
  type: standard
  state: visible
  flags:
    - type: static
      content: b678700715f93745489cc1c814db96f7f83093e1
      data: null
  hints:
    - type: standard
      content: >-
        Find out where this information could come from. Then craft a UNION
        SELECT attack string against an endpoint that offers an unnecessary way
        to filter data.
      cost: 45
- name: Deprecated Interface
  description: >-
    Use a deprecated B2B interface that was not properly shut down. (Difficulty
    Level: 2)
  max_attempts: 0
  value: 250
  category: Security Misconfiguration
  type: standard
  state: visible
  flags:
    - type: static
      content: 3cc8ec21759b4b4f24c6480e83d11f2d2d0e308b
      data: null
  hints:
    - type: standard
      content: >-
        The developers who disabled the interface think they could go invisible
        by just closing their eyes.
      cost: 25
- name: Easter Egg
  description: >-
    Find the hidden <a href="http://en.wikipedia.org/wiki/Easter_egg_(media)"
    target="_blank">easter egg</a>. (Difficulty Level: 4)
  max_attempts: 0
  value: 700
  category: Broken Access Control
  type: standard
  state: visible
  flags:
    - type: static
      content: 81c878d600ea90d8ff3c087c510f9e454bbf9af0
      data: null
  hints:
    - type: standard
      content: >-
        If you solved one of the three file access challenges, you already know
        where to find the easter egg.
      cost: 70
- name: Email Leak
  description: >-
    Perform an unwanted information disclosure by accessing data cross-domain.
    (Difficulty Level: 5)
  max_attempts: 0
  value: 1000
  category: Sensitive Data Exposure
  type: standard
  state: visible
  flags:
    - type: static
      content: 5a727a17648e2d54c4089402fcc5ff4cdc3ff2bf
      data: null
  hints:
    - type: standard
      content: >-
        Try to find and attack an endpoint that responds with user information.
        SQL Injection is not the solution here.
      cost: 100
- name: Ephemeral Accountant
  description: >-
    Log in with the (non-existing) accountant <i>acc0unt4nt@juice-sh.op</i>
    without ever registering that user. (Difficulty Level: 4)
  max_attempts: 0
  value: 700
  category: Injection
  type: standard
  state: visible
  flags:
    - type: static
      content: b2645a86825288a47912f13e5689c8166dd4756b
      data: null
  hints:
    - type: standard
      content: Try to create the needed user "out of thin air".
      cost: 70
- name: Error Handling
  description: >-
    Provoke an error that is neither very gracefully nor consistently handled.
    (Difficulty Level: 1)
  max_attempts: 0
  value: 100
  category: Security Misconfiguration
  type: standard
  state: visible
  flags:
    - type: static
      content: 7061868cce75b802d853725d9a63a083c60572d7
      data: null
  hints:
    - type: standard
      content: >-
        Try to submit bad input to forms. Alternatively tamper with URL paths or
        parameters.
      cost: 10
- name: Expired Coupon
  description: 'Successfully redeem an expired campaign coupon code. (Difficulty Level: 4)'
  max_attempts: 0
  value: 700
  category: Improper Input Validation
  type: standard
  state: visible
  flags:
    - type: static
      content: 8a8824d186754885b97abd574ec2891b165e814d
      data: null
  hints:
    - type: standard
      content: >-
        Try to identify past special event or holiday campaigns of the shop
        first.
      cost: 70
- name: Extra Language
  description: >-
    Retrieve the language file that never made it into production. (Difficulty
    Level: 5)
  max_attempts: 0
  value: 1000
  category: Broken Anti Automation
  type: standard
  state: visible
  flags:
    - type: static
      content: 70ba7f3f90857971a9f11a1bfe0a6161c3f009f0
      data: null
  hints:
    - type: standard
      content: >-
        Brute force is not the only option for this challenge, but a perfectly
        viable one.
      cost: 100
- name: Five-Star Feedback
  description: 'Get rid of all 5-star customer feedback. (Difficulty Level: 2)'
  max_attempts: 0
  value: 250
  category: Broken Access Control
  type: standard
  state: visible
  flags:
    - type: static
      content: ed008cefb6118ab9d929c819419cb39cd0bdbfac
      data: null
  hints:
    - type: standard
      content: >-
        Once you found admin section of the application, this challenge is
        almost trivial.
      cost: 25
- name: Forged Coupon
  description: >-
    Forge a coupon code that gives you a discount of at least 80%. (Difficulty
    Level: 6)
  max_attempts: 0
  value: 1350
  category: Cryptographic Issues
  type: standard
  state: visible
  flags:
    - type: static
      content: f40af0ddf73fd533145d650f95ef8e66d42ee7b0
      data: null
  hints:
    - type: standard
      content: >-
        Try either a) a knowledgable brute force attack or b) reverse
        engineering or c) some research in the cloud.
      cost: 135
- name: Forged Feedback
  description: 'Post some feedback in another users name. (Difficulty Level: 3)'
  max_attempts: 0
  value: 450
  category: Broken Access Control
  type: standard
  state: visible
  flags:
    - type: static
      content: 61252e36a514d7f773cefa96e7b8499ac21d16ec
      data: null
  hints:
    - type: standard
      content: >-
        You can solve this by tampering with the user interface or by
        intercepting the communication with the RESTful backend.
      cost: 45
- name: Forged Review
  description: >-
    Post a product review as another user or edit any user's existing review.
    (Difficulty Level: 3)
  max_attempts: 0
  value: 450
  category: Broken Access Control
  type: standard
  state: visible
  flags:
    - type: static
      content: ad461e542f7a1fdbf5f9acb3fef4371dc8adec5c
      data: null
  hints:
    - type: standard
      content: >-
        Observe the flow of product review posting and editing and see if you
        can exploit it.
      cost: 45
- name: Forged Signed JWT
  description: >-
    Forge an almost properly RSA-signed JWT token that impersonates the
    (non-existing) user <i>rsa_lord@juice-sh.op</i>. (Difficulty Level: 6)
  max_attempts: 0
  value: 1350
  category: Vulnerable Components
  type: standard
  state: visible
  flags:
    - type: static
      content: b216e06cf93f9762b0b932e7172603dfd2d9a4a1
      data: null
  hints:
    - type: standard
      content: >-
        This challenge is explicitly not about acquiring the RSA private key
        used for JWT signing.
      cost: 135
- name: Forgotten Developer Backup
  description: 'Access a developer''s forgotten backup file. (Difficulty Level: 4)'
  max_attempts: 0
  value: 700
  category: Sensitive Data Exposure
  type: standard
  state: visible
  flags:
    - type: static
      content: fcf6a79d70fad0258406d43f1aa965c63b8f969d
      data: null
  hints:
    - type: standard
      content: >-
        You need to trick a security mechanism into thinking that the file you
        want has a valid file type.
      cost: 70
- name: Forgotten Sales Backup
  description: 'Access a salesman''s forgotten backup file. (Difficulty Level: 4)'
  max_attempts: 0
  value: 700
  category: Sensitive Data Exposure
  type: standard
  state: visible
  flags:
    - type: static
      content: cc5b4fae96d986423d28954c66cc67764491886f
      data: null
  hints:
    - type: standard
      content: >-
        You need to trick a security mechanism into thinking that the file you
        want has a valid file type.
      cost: 70
- name: Frontend Typosquatting
  description: >-
    <a href="/#/contact">Inform the shop</a> about a <i>typosquatting</i>
    imposter that dug itself deep into the frontend. (Mention the exact name of
    the culprit) (Difficulty Level: 5)
  max_attempts: 0
  value: 1000
  category: Vulnerable Components
  type: standard
  state: visible
  flags:
    - type: static
      content: 070ecb28717e62a2dde9d01fe98999dd18f20468
      data: null
  hints:
    - type: standard
      content: >-
        This challenge has nothing to do with mistyping web domains. There is no
        conveniently misplaced file helping you with this one either. Or is
        there?
      cost: 100
- name: GDPR Data Erasure
  description: 'Log in with Chris'' erased user account. (Difficulty Level: 3)'
  max_attempts: 0
  value: 450
  category: Broken Authentication
  type: standard
  state: visible
  flags:
    - type: static
      content: c8a9f0809d61244f587fc7247802260751661566
      data: null
  hints:
    - type: standard
      content: >-
        Turns out that something is technically and legally wrong with the
        implementation of the "right to be forgotten" for users.
      cost: 45
- name: GDPR Data Theft
  description: >-
    Steal someone else's personal data without using Injection. (Difficulty
    Level: 4)
  max_attempts: 0
  value: 700
  category: Sensitive Data Exposure
  type: standard
  state: visible
  flags:
    - type: static
      content: beeaa1d1493532dd5a74fb045bb90276fdba6d39
      data: null
  hints:
    - type: standard
      content: >-
        Trick the regular Data Export to give you more than actually belongs to
        you.
      cost: 70
- name: HTTP-Header XSS
  description: >-
    Perform a <i>persisted</i> XSS attack with <code>&lt;iframe
    src="javascript:alert(&#x60;xss&#x60;)"&gt;</code> through an HTTP header.
    (Difficulty Level: 4)
  max_attempts: 0
  value: 700
  category: XSS
  type: standard
  state: visible
  flags:
    - type: static
      content: 9b672e8c3cc91febf7a1ca58dbb828289d473b64
      data: null
  hints:
    - type: standard
      content: >-
        Finding a piece of displayed information that could originate from an
        HTTP header is part of this challenge.
      cost: 70
- name: Imaginary Challenge
  description: >-
    Solve challenge #999. Unfortunately, this challenge does not exist.
    (Difficulty Level: 6)
  max_attempts: 0
  value: 1350
  category: Cryptographic Issues
  type: standard
  state: visible
  flags:
    - type: static
      content: c29ac131244c9c0ed1c819f64ebb9426094b3b5f
      data: null
  hints:
    - type: standard
      content: >-
        You need to trick the hacking progress persistence feature into thinking
        you solved challenge #999.
      cost: 135
- name: Leaked Access Logs
  description: >-
    Dumpster dive the Internet for a leaked password and log in to the original
    user account it belongs to. (Creating a new account with the same password
    does not qualify as a solution.) (Difficulty Level: 5)
  max_attempts: 0
  value: 1000
  category: Sensitive Data Exposure
  type: standard
  state: visible
  flags:
    - type: static
      content: 12d5bb87cd153f7b0d16cdca91652768a5af79a0
      data: null
  hints:
    - type: standard
      content: >-
        Once you have it, a technique called "Password Spraying" might prove
        useful.
      cost: 100
- name: Leaked Unsafe Product
  description: >-
    Identify an unsafe product that was removed from the shop and <a
    href="/#/contact">inform the shop</a> which ingredients are dangerous.
    (Difficulty Level: 4)
  max_attempts: 0
  value: 700
  category: Sensitive Data Exposure
  type: standard
  state: visible
  flags:
    - type: static
      content: cf2dc966a0d4b976fa5a5e7894f07e8d589aeb59
      data: null
  hints:
    - type: standard
      content: >-
        Your own SQLi and someone else's Ctrl-V will be your accomplices in this
        challenge!
      cost: 70
- name: Legacy Typosquatting
  description: >-
    <a href="/#/contact">Inform the shop</a> about a <i>typosquatting</i> trick
    it has been a victim of at least in <code>v6.2.0-SNAPSHOT</code>. (Mention
    the exact name of the culprit) (Difficulty Level: 4)
  max_attempts: 0
  value: 700
  category: Vulnerable Components
  type: standard
  state: visible
  flags:
    - type: static
      content: 79d7cca7645bda7ab2cc21b18fe9d394972ab108
      data: null
  hints:
    - type: standard
      content: >-
        This challenge has nothing to do with mistyping web domains. Investigate
        the forgotten developer's backup file instead.
      cost: 70
- name: Login Admin
  description: 'Log in with the administrator''s user account. (Difficulty Level: 2)'
  max_attempts: 0
  value: 250
  category: Injection
  type: standard
  state: visible
  flags:
    - type: static
      content: b5de91628c181a19382c47935ae2521694c03c16
      data: null
  hints:
    - type: standard
      content: >-
        Try different SQL Injection attack patterns depending whether you know
        the admin's email address or not.
      cost: 25
- name: Login Amy
  description: >-
    Log in with Amy's original user credentials. (This could take 93.83 billion
    trillion trillion centuries to brute force, but luckily she did not read the
    "One Important Final Note") (Difficulty Level: 3)
  max_attempts: 0
  value: 450
  category: Sensitive Data Exposure
  type: standard
  state: visible
  flags:
    - type: static
      content: 65747bb6c0f5684f1dc59ad31a41902f89a09bf8
      data: null
  hints:
    - type: standard
      content: This challenge will make you go after a needle in a haystack.
      cost: 45
- name: Login Bender
  description: 'Log in with Bender''s user account. (Difficulty Level: 3)'
  max_attempts: 0
  value: 450
  category: Injection
  type: standard
  state: visible
  flags:
    - type: static
      content: 6c101e0cc325ec62b9bdc2f3f3ea3cd42c80de6a
      data: null
  hints:
    - type: standard
      content: >-
        If you know Bender's email address, try SQL Injection. Bender's password
        hash might not help you very much.
      cost: 45
- name: Login Bjoern
  description: >-
    Log in with Bjoern's Gmail account <i>without</i> previously changing his
    password, applying SQL Injection, or hacking his Google account. (Difficulty
    Level: 4)
  max_attempts: 0
  value: 700
  category: Broken Authentication
  type: standard
  state: visible
  flags:
    - type: static
      content: f118a9ccd3bd8075f66d106de2125ea5b212b8ca
      data: null
  hints:
    - type: standard
      content: >-
        The security flaw behind this challenge is 100% OWASP Juice Shop's fault
        and 0% Google's.
      cost: 70
- name: Login Jim
  description: 'Log in with Jim''s user account. (Difficulty Level: 3)'
  max_attempts: 0
  value: 450
  category: Injection
  type: standard
  state: visible
  flags:
    - type: static
      content: 6b55dcb120e3b256e0d6c14a479a72977596dd75
      data: null
  hints:
    - type: standard
      content: >-
        Try cracking Jim's password hash if you harvested it already.
        Alternatively, if you know Jim's email address, try SQL Injection.
      cost: 45
- name: Login MC SafeSearch
  description: >-
    Log in with MC SafeSearch's original user credentials without applying SQL
    Injection or any other bypass. (Difficulty Level: 2)
  max_attempts: 0
  value: 250
  category: Sensitive Data Exposure
  type: standard
  state: visible
  flags:
    - type: static
      content: 8736b89cd2eeaf00422815d32285c84c48f27035
      data: null
  hints:
    - type: standard
      content: You should listen to MC's hit song "Protect Ya Passwordz".
      cost: 25
- name: Login Support Team
  description: >-
    Log in with the support team's original user credentials without applying
    SQL Injection or any other bypass. (Difficulty Level: 6)
  max_attempts: 0
  value: 1350
  category: Security Misconfiguration
  type: standard
  state: visible
  flags:
    - type: static
      content: 0ccf585272678795457e2406af2abeb9c1d6fca4
      data: null
  hints:
    - type: standard
      content: >-
        The underlying flaw of this challenge is a lot more human error than
        technical weakness.
      cost: 135
- name: Manipulate Basket
  description: >-
    Put an additional product into another user's shopping basket. (Difficulty
    Level: 3)
  max_attempts: 0
  value: 450
  category: Broken Access Control
  type: standard
  state: visible
  flags:
    - type: static
      content: 018bc30b82351a505d52251864943fb3c3289e7c
      data: null
  hints:
    - type: standard
      content: >-
        Have an eye on the HTTP traffic while placing products in the shopping
        basket. Changing the quantity of products already in the basket doesn't
        count.
      cost: 45
- name: Misplaced Signature File
  description: >-
    Access a misplaced <a href="https://github.com/Neo23x0/sigma">SIEM
    signature</a> file. (Difficulty Level: 4)
  max_attempts: 0
  value: 700
  category: Sensitive Data Exposure
  type: standard
  state: visible
  flags:
    - type: static
      content: a0558e87dfa8d6f942272658e4745ec7cb04c000
      data: null
  hints:
    - type: standard
      content: >-
        You need to trick a security mechanism into thinking that the file you
        want has a valid file type.
      cost: 70
- name: Multiple Likes
  description: 'Like any review at least three times as the same user. (Difficulty Level: 6)'
  max_attempts: 0
  value: 1350
  category: Broken Anti Automation
  type: standard
  state: visible
  flags:
    - type: static
      content: 95a8faa40b1a2868d588e1b6956904e7a110de92
      data: null
  hints:
    - type: standard
      content: Punctuality is the politeness of kings.
      cost: 135
- name: Nested Easter Egg
  description: >-
    Apply some advanced cryptanalysis to find <i>the real</i> easter egg.
    (Difficulty Level: 4)
  max_attempts: 0
  value: 700
  category: Cryptographic Issues
  type: standard
  state: visible
  flags:
    - type: static
      content: 21d16b30c93786cc8bf2d5daa7829c8b971c0fd4
      data: null
  hints:
    - type: standard
      content: >-
        You might have to peel through several layers of tough-as-nails
        encryption for this challenge.
      cost: 70
- name: NoSQL DoS
  description: >-
    Let the server sleep for some time. (It has done more than enough hard work
    for you) (Difficulty Level: 4)
  max_attempts: 0
  value: 700
  category: Injection
  type: standard
  state: visible
  flags:
    - type: static
      content: ca882a0d1356d37d26080e49071363edbbeef14c
      data: null
  hints:
    - type: standard
      content: >-
        This challenge is essentially a stripped-down Denial of Service (DoS)
        attack.
      cost: 70
- name: NoSQL Exfiltration
  description: >-
    All your orders are belong to us! Even the ones which don't. (Difficulty
    Level: 5)
  max_attempts: 0
  value: 1000
  category: Injection
  type: standard
  state: visible
  flags:
    - type: static
      content: 3f7dad4c9b75b6818a21633b3ff054250a3789da
      data: null
  hints:
    - type: standard
      content: Take a close look on how the $where query operator works in MongoDB.
      cost: 100
- name: NoSQL Manipulation
  description: 'Update multiple product reviews at the same time. (Difficulty Level: 4)'
  max_attempts: 0
  value: 700
  category: Injection
  type: standard
  state: visible
  flags:
    - type: static
      content: 54eabec4928b1fa4b6c1559bb28b0c995a299fff
      data: null
  hints:
    - type: standard
      content: >-
        Take a close look on how the equivalent of UPDATE-statements in MongoDB
        work.
      cost: 70
- name: Outdated Allowlist
  description: >-
    Let us redirect you to one of our crypto currency addresses which are not
    promoted any longer. (Difficulty Level: 1)
  max_attempts: 0
  value: 100
  category: Unvalidated Redirects
  type: standard
  state: visible
  flags:
    - type: static
      content: d5cbaade284f9c5c961b5a8f864b8fab431d4fc3
      data: null
  hints:
    - type: standard
      content: We might have failed to take this out of our code properly.
      cost: 10
- name: Password Strength
  description: >-
    Log in with the administrator's user credentials without previously changing
    them or applying SQL Injection. (Difficulty Level: 2)
  max_attempts: 0
  value: 250
  category: Broken Authentication
  type: standard
  state: visible
  flags:
    - type: static
      content: be0e7a4517be555242fa83fad184ff556a13fb40
      data: null
  hints:
    - type: standard
      content: >-
        This one should be equally easy to a) brute force, b) crack the password
        hash or c) simply guess.
      cost: 25
- name: Payback Time
  description: 'Place an order that makes you rich. (Difficulty Level: 3)'
  max_attempts: 0
  value: 450
  category: Improper Input Validation
  type: standard
  state: visible
  flags:
    - type: static
      content: 85aa1c508fa0832de10fae4eddbb1b8f2d4e04c0
      data: null
  hints:
    - type: standard
      content: You literally need to make the shop owe you any amount of money.
      cost: 45
- name: Premium Paywall
  description: >-
    <i class="far fa-gem"></i><i class="far fa-gem"></i><i class="far
    fa-gem"></i><i class="far fa-gem"></i><i class="far
    fa-gem"></i><!--IvLuRfBJYlmStf9XfL6ckJFngyd9LfV1JaaN/KRTPQPidTuJ7FR+D/nkWJUF+0xUF07CeCeqYfxq+OJVVa0gNbqgYkUNvn//UbE7e95C+6e+7GtdpqJ8mqm4WcPvUGIUxmGLTTAC2+G9UuFCD1DUjg==-->
    <a href="https://blockchain.info/address/1AbKfgvw9psQ41NbLi8kufDQTezwG8DRZm"
    target="_blank"><i class="fab fa-btc fa-sm"></i> Unlock Premium
    Challenge</a> to access exclusive content. (Difficulty Level: 6)
  max_attempts: 0
  value: 1350
  category: Cryptographic Issues
  type: standard
  state: visible
  flags:
    - type: static
      content: 0ae8077542593f82282ed0beee1de6d80cb7b893
      data: null
  hints:
    - type: standard
      content: >-
        You do not have to pay anything to unlock this challenge! Nonetheless,
        donations are very much appreciated.
      cost: 135
- name: Privacy Policy
  description: 'Read our privacy policy. (Difficulty Level: 1)'
  max_attempts: 0
  value: 100
  category: Miscellaneous
  type: standard
  state: visible
  flags:
    - type: static
      content: 80f15cbcf60fdd72b6c4a5a0074e22a2b9a87114
      data: null
  hints:
    - type: standard
      content: >-
        We won't even ask you to confirm that you did. Just read it. Please.
        Pretty please.
      cost: 10
- name: Privacy Policy Inspection
  description: 'Prove that you actually read our privacy policy. (Difficulty Level: 3)'
  max_attempts: 0
  value: 450
  category: Security through Obscurity
  type: standard
  state: visible
  flags:
    - type: static
      content: 0b0928f5b1de1377f510b2bc8c67a5c540b415a2
      data: null
  hints:
    - type: standard
      content: >-
        Only by visiting a special URL you can confirm that you read it
        carefully.
      cost: 45
- name: Product Tampering
  description: >-
    Change the <code>href</code> of the link within the <a
    href="/#/search?q=OWASP SSL Advanced Forensic Tool (O-Saft)">OWASP SSL
    Advanced Forensic Tool (O-Saft)</a> product description into
    <i>https://owasp.slack.com</i>. (Difficulty Level: 3)
  max_attempts: 0
  value: 450
  category: Broken Access Control
  type: standard
  state: visible
  flags:
    - type: static
      content: 7646a29bef6bb8655f2af7736ec11771f2d28aba
      data: null
  hints:
    - type: standard
      content: >-
        Look for one of the following: a) broken admin functionality, b) holes
        in RESTful API or c) possibility for SQL Injection.
      cost: 45
- name: Reflected XSS
  description: >-
    Perform a <i>reflected</i> XSS attack with <code>&lt;iframe
    src="javascript:alert(&#x60;xss&#x60;)"&gt;</code>. (Difficulty Level: 2)
  max_attempts: 0
  value: 250
  category: XSS
  type: standard
  state: visible
  flags:
    - type: static
      content: 73079c734cb117f5fab4d4651c90e536b6b882d2
      data: null
  hints:
    - type: standard
      content: >-
        Look for a url parameter where its value appears in the page it is
        leading to.
      cost: 25
- name: Repetitive Registration
  description: 'Follow the DRY principle while registering a user. (Difficulty Level: 1)'
  max_attempts: 0
  value: 100
  category: Improper Input Validation
  type: standard
  state: visible
  flags:
    - type: static
      content: d3559f0e348ea4d6b996487ccf8dd36215bae5a8
      data: null
  hints:
    - type: standard
      content: >-
        You can solve this by cleverly interacting with the UI or bypassing it
        altogether.
      cost: 10
- name: Reset Bender's Password
  description: >-
    Reset Bender's password via the <a href="/#/forgot-password">Forgot
    Password</a> mechanism with <i>the original answer</i> to his security
    question. (Difficulty Level: 4)
  max_attempts: 0
  value: 700
  category: Broken Authentication
  type: standard
  state: visible
  flags:
    - type: static
      content: 398351fea28a93d14ec7aa404f1df101fe988fc3
      data: null
  hints:
    - type: standard
      content: >-
        Not as trivial as Jim's but still not too difficult with some "Futurama"
        background knowledge.
      cost: 70
- name: Reset Bjoern's Password
  description: >-
    Reset the password of Bjoern's internal account via the <a
    href="/#/forgot-password">Forgot Password</a> mechanism with <i>the original
    answer</i> to his security question. (Difficulty Level: 5)
  max_attempts: 0
  value: 1000
  category: Broken Authentication
  type: standard
  state: visible
  flags:
    - type: static
      content: 8b97ebd37153194c3bf87ce0201b9b3a835f2689
      data: null
  hints:
    - type: standard
      content: >-
        Nothing a little bit of Facebook stalking couldn't reveal. Might involve
        a historical twist.
      cost: 100
- name: Reset Jim's Password
  description: >-
    Reset Jim's password via the <a href="/#/forgot-password">Forgot
    Password</a> mechanism with <i>the original answer</i> to his security
    question. (Difficulty Level: 3)
  max_attempts: 0
  value: 450
  category: Broken Authentication
  type: standard
  state: visible
  flags:
    - type: static
      content: 10f246fcd009c0da01217237b9a7bf8f60d8d2e4
      data: null
  hints:
    - type: standard
      content: >-
        It's hard for celebrities to pick a security question from a hard-coded
        list where the answer is not publicly exposed.
      cost: 45
- name: Reset Morty's Password
  description: >-
    Reset Morty's password via the <a href="/#/forgot-password">Forgot
    Password</a> mechanism with <i>his obfuscated answer</i> to his security
    question. (Difficulty Level: 5)
  max_attempts: 0
  value: 1000
  category: Broken Anti Automation
  type: standard
  state: visible
  flags:
    - type: static
      content: a1d359c6573792d51414609ed421ccd140b9dcb8
      data: null
  hints:
    - type: standard
      content: >-
        Find a way to bypass the rate limiting and brute force the obfuscated
        answer to Morty's security question.
      cost: 100
- name: Retrieve Blueprint
  description: >-
    Deprive the shop of earnings by downloading the blueprint for one of its
    products. (Difficulty Level: 5)
  max_attempts: 0
  value: 1000
  category: Sensitive Data Exposure
  type: standard
  state: visible
  flags:
    - type: static
      content: c556ecb62fccbe92c1fa995173ee6af1fb036fe5
      data: null
  hints:
    - type: standard
      content: >-
        The product you might want to give a closer look is the OWASP Juice Shop
        Logo (3D-printed).
      cost: 100
- name: SSRF
  description: 'Request a hidden resource on server through server. (Difficulty Level: 6)'
  max_attempts: 0
  value: 1350
  category: Broken Access Control
  type: standard
  state: visible
  flags:
    - type: static
      content: b4bf08bcae2e6a2fcdcc2c487e9b18828127b7e8
      data: null
  hints:
    - type: standard
      content: Reverse engineering something bad can make good things happen.
      cost: 135
- name: SSTi
  description: >-
    Infect the server with juicy malware by abusing arbitrary command execution.
    (Difficulty Level: 6)
  max_attempts: 0
  value: 1350
  category: Injection
  type: standard
  state: visible
  flags:
    - type: static
      content: bd07a4e73008348ce05e50b327b6b92d8e91d94e
      data: null
  hints:
    - type: standard
      content: >-
        "SSTi" is a clear indicator that this has nothing to do with anything
        Angular. Also, make sure to use only our non-malicious malware.
      cost: 135
- name: Score Board
  description: 'Find the carefully hidden ''Score Board'' page. (Difficulty Level: 1)'
  max_attempts: 0
  value: 100
  category: Miscellaneous
  type: standard
  state: visible
  flags:
    - type: static
      content: ecfb25e0650db7b5d4d2644a67979e53b6588063
      data: null
  hints:
    - type: standard
      content: >-
        Try to find a reference or clue behind the scenes. Or simply guess what
        URL the Score Board might have.
      cost: 10
- name: Security Policy
  description: >-
    Behave like any "white-hat" should before getting into the action.
    (Difficulty Level: 2)
  max_attempts: 0
  value: 250
  category: Miscellaneous
  type: standard
  state: visible
  flags:
    - type: static
      content: e71d93107808b18f6ee8819b08d8c89fd59e3075
      data: null
  hints:
    - type: standard
      content: >-
        Undoubtably you want to read our security policy before conducting any
        research on our application.
      cost: 25
- name: Server-side XSS Protection
  description: >-
    Perform a <i>persisted</i> XSS attack with <code>&lt;iframe
    src="javascript:alert(&#x60;xss&#x60;)"&gt;</code> bypassing a
    <i>server-side</i> security mechanism. (Difficulty Level: 4)
  max_attempts: 0
  value: 700
  category: XSS
  type: standard
  state: visible
  flags:
    - type: static
      content: fb04e2f859baae3d2a4cfbb8d006e4614f7d9e14
      data: null
  hints:
    - type: standard
      content: >-
        The "Comment" field in the "Customer Feedback" screen is where you want
        to put your focus on.
      cost: 70
- name: Steganography
  description: >-
    <a href="/#/contact">Rat out</a> a notorious character hiding in plain sight
    in the shop. (Mention the exact name of the character) (Difficulty Level: 4)
  max_attempts: 0
  value: 700
  category: Security through Obscurity
  type: standard
  state: visible
  flags:
    - type: static
      content: 009f58f39aa845cff4a30b2825fb540ffd0df742
      data: null
  hints:
    - type: standard
      content: >-
        No matter how good your eyes are, you will need tool assistance for this
        challenge.
      cost: 70
- name: Successful RCE DoS
  description: >-
    Perform a Remote Code Execution that occupies the server for a while without
    using infinite loops. (Difficulty Level: 6)
  max_attempts: 0
  value: 1350
  category: Insecure Deserialization
  type: standard
  state: visible
  flags:
    - type: static
      content: 0a451b66b8971e71bbabee54691d07a565a64b8b
      data: null
  hints:
    - type: standard
      content: >-
        Your attack payload must not trigger the protection against too many
        iterations.
      cost: 135
- name: Supply Chain Attack
  description: >-
    <a href="/#/contact">Inform the development team</a> about a danger to some
    of <em>their</em> credentials. (Send them the URL of the <em>original
    report</em> or an assigned CVE or another identifier of this vulnerability)
    (Difficulty Level: 5)
  max_attempts: 0
  value: 1000
  category: Vulnerable Components
  type: standard
  state: visible
  flags:
    - type: static
      content: 9256f6e31addbe404912603733ef66a51d26969c
      data: null
  hints:
    - type: standard
      content: >-
        This vulnerability will not affect any customer of the shop. It is aimed
        exclusively at its developers.
      cost: 100
- name: Two Factor Authentication
  description: >-
    Solve the 2FA challenge for user "wurstbrot". (Disabling, bypassing or
    overwriting his 2FA settings does not count as a solution) (Difficulty
    Level: 5)
  max_attempts: 0
  value: 1000
  category: Broken Authentication
  type: standard
  state: visible
  flags:
    - type: static
      content: ae4afcbcfe43f625d2f6dbd39e77eaefae0f051a
      data: null
  hints:
    - type: standard
      content: >-
        The 2FA implementation requires to store a secret for every user. You
        will need to find a way to access this secret in order to solve this
        challenge.
      cost: 100
- name: Unsigned JWT
  description: >-
    Forge an essentially unsigned JWT token that impersonates the (non-existing)
    user <i>jwtn3d@juice-sh.op</i>. (Difficulty Level: 5)
  max_attempts: 0
  value: 1000
  category: Vulnerable Components
  type: standard
  state: visible
  flags:
    - type: static
      content: 93adadc6c90b48b26e345c8a48d4555be4269098
      data: null
  hints:
    - type: standard
      content: >-
        This challenge exploits a weird option that is supported when signing
        tokens with JWT.
      cost: 100
- name: Upload Size
  description: 'Upload a file larger than 100 kB. (Difficulty Level: 3)'
  max_attempts: 0
  value: 450
  category: Improper Input Validation
  type: standard
  state: visible
  flags:
    - type: static
      content: b3cd85135be20ebf8ea844fd5de3e364076e2bca
      data: null
  hints:
    - type: standard
      content: >-
        You can attach a small file to the "Complaint" form. Investigate how
        this upload actually works.
      cost: 45
- name: Upload Type
  description: 'Upload a file that has no .pdf or .zip extension. (Difficulty Level: 3)'
  max_attempts: 0
  value: 450
  category: Improper Input Validation
  type: standard
  state: visible
  flags:
    - type: static
      content: 0ba2ba62379efcbe920d100e82bffe5a632a3c04
      data: null
  hints:
    - type: standard
      content: >-
        You can attach a PDF or ZIP file to the "Complaint" form. Investigate
        how this upload actually works.
      cost: 45
- name: User Credentials
  description: >-
    Retrieve a list of all user credentials via SQL Injection. (Difficulty
    Level: 4)
  max_attempts: 0
  value: 700
  category: Injection
  type: standard
  state: visible
  flags:
    - type: static
      content: 56ab6f523052db99a6abf49464aba73e2a204f12
      data: null
  hints:
    - type: standard
      content: >-
        Gather information on where user data is stored and how it is addressed.
        Then craft a corresponding UNION SELECT attack.
      cost: 70
- name: Video XSS
  description: >-
    Embed an XSS payload
    <code>&lt;/script&gt;&lt;script&gt;alert(&#x60;xss&#x60;)&lt;/script&gt;</code>
    into our promo video. (Difficulty Level: 6)
  max_attempts: 0
  value: 1350
  category: XSS
  type: standard
  state: visible
  flags:
    - type: static
      content: f6f96e145b05afb65631d1542f75cdb8742106d3
      data: null
  hints:
    - type: standard
      content: >-
        You have to reuse the vulnerability behind one other 6-star challenge to
        be able to solve this one.
      cost: 135
- name: View Basket
  description: 'View another user''s shopping basket. (Difficulty Level: 2)'
  max_attempts: 0
  value: 250
  category: Broken Access Control
  type: standard
  state: visible
  flags:
    - type: static
      content: 1e4955cdddbae94ad17c2020ea1acebc9fbaf5bf
      data: null
  hints:
    - type: standard
      content: >-
        Have an eye on the HTTP traffic while shopping. Alternatively try to
        find a client-side association of users to their basket.
      cost: 25
- name: Vulnerable Library
  description: >-
    <a href="/#/contact">Inform the shop</a> about a vulnerable library it is
    using. (Mention the exact library name and version in your comment)
    (Difficulty Level: 4)
  max_attempts: 0
  value: 700
  category: Vulnerable Components
  type: standard
  state: visible
  flags:
    - type: static
      content: f4865cbcddd36a813b74b441eb620e7428942546
      data: null
  hints:
    - type: standard
      content: >-
        Report one of two possible answers via the "Customer Feedback" form. Do
        not forget to submit the library's version as well.
      cost: 70
- name: Weird Crypto
  description: >-
    <a href="/#/contact">Inform the shop</a> about an algorithm or library it
    should definitely not use the way it does. (Difficulty Level: 2)
  max_attempts: 0
  value: 250
  category: Cryptographic Issues
  type: standard
  state: visible
  flags:
    - type: static
      content: ff30d1d92ab77df86e4c118a2b0e33fc8b0632e8
      data: null
  hints:
    - type: standard
      content: Report one of four possible answers via the "Customer Feedback" form.
      cost: 25
- name: Allowlist Bypass
  description: >-
    Enforce a redirect to a page you are not supposed to redirect to.
    (Difficulty Level: 4)
  max_attempts: 0
  value: 700
  category: Unvalidated Redirects
  type: standard
  state: visible
  flags:
    - type: static
      content: a7130c6994d92f4168697320b3179ec2dabbf6ae
      data: null
  hints:
    - type: standard
      content: You have to find a way to beat the allowlist of allowed redirect URLs.
      cost: 70
- name: XXE Data Access
  description: >-
    Retrieve the content of <code>C:\Windows\system.ini</code> or
    <code>/etc/passwd</code> from the server. (Difficulty Level: 3)
  max_attempts: 0
  value: 450
  category: XXE
  type: standard
  state: visible
  flags:
    - type: static
      content: cc03d1fce7b4ad245c3695e589eb0ebc131eb9e8
      data: null
  hints:
    - type: standard
      content: The leverage point for this challenge is the deprecated B2B interface.
      cost: 45
- name: XXE DoS
  description: >-
    Give the server something to chew on for quite a while. (Difficulty Level:
    5)
  max_attempts: 0
  value: 1000
  category: XXE
  type: standard
  state: visible
  flags:
    - type: static
      content: 132589b7f37b1ea05e2a76af90039520ee9ebd24
      data: null
  hints:
    - type: standard
      content: >-
        It is not as easy as sending a large amount of data directly to the
        deprecated B2B interface.
      cost: 100
- name: Zero Stars
  description: 'Give a devastating zero-star feedback to the store. (Difficulty Level: 1)'
  max_attempts: 0
  value: 100
  category: Improper Input Validation
  type: standard
  state: visible
  flags:
    - type: static
      content: 997415d92e9fbd67fe7103855f9adbe42c333dad
      data: null
  hints:
    - type: standard
      content: >-
        Before you invest time bypassing the API, you might want to play around
        with the UI a bit.
      cost: 10
- name: Missing Encoding
  description: >-
    Retrieve the photo of Bjoern's cat in "melee combat-mode". (Difficulty
    Level: 1)
  max_attempts: 0
  value: 100
  category: Improper Input Validation
  type: standard
  state: visible
  flags:
    - type: static
      content: 24c79a3e2c04827426eecccef22ec44714152762
      data: null
  hints:
    - type: standard
      content: Check the Photo Wall for an image that could not be loaded correctly.
      cost: 10
- name: Cross-Site Imaging
  description: >-
    Stick <a href="http://placekitten.com/" target="_blank">cute cross-domain
    kittens</a> all over our delivery boxes. (Difficulty Level: 5)
  max_attempts: 0
  value: 1000
  category: Security Misconfiguration
  type: standard
  state: visible
  flags:
    - type: static
      content: 2aeb0250517a4509c49fe86b116ce6822ca237ac
      data: null
  hints:
    - type: standard
      content: >-
        This challenge would formally have to be in several categories as the
        developers made multiple gaffes for this to be possible.
      cost: 100
- name: Exposed Metrics
  description: >-
    Find the endpoint that serves usage data to be scraped by a <a
    href="https://github.com/prometheus/prometheus">popular monitoring
    system</a>. (Difficulty Level: 1)
  max_attempts: 0
  value: 100
  category: Sensitive Data Exposure
  type: standard
  state: visible
  flags:
    - type: static
      content: 50e2ec93ae42161011f90f9a23985d3c52aea8fc
      data: null
  hints:
    - type: standard
      content: Try to guess what URL the endpoint might have.
      cost: 10
- name: Deluxe Fraud
  description: 'Obtain a Deluxe Membership without paying for it. (Difficulty Level: 3)'
  max_attempts: 0
  value: 450
  category: Improper Input Validation
  type: standard
  state: visible
  flags:
    - type: static
      content: fcb90576ad2fe46ac1586e2ae8c524ca6086d7bf
      data: null
  hints:
    - type: standard
      content: Look closely at what happens when you attempt to upgrade your account.
      cost: 45
- name: CSRF
  description: >-
    Change the name of a user by performing Cross-Site Request Forgery from <a
    href="http://htmledit.squarefree.com">another origin</a>. (Difficulty Level:
    3)
  max_attempts: 0
  value: 450
  category: Broken Access Control
  type: standard
  state: visible
  flags:
    - type: static
      content: c89c200f5aa13a015800712cd6080a9471b99e14
      data: null
  hints:
    - type: standard
      content: >-
        Find a form which updates the username and then construct a malicious
        page in the online HTML editor.
      cost: 45
- name: Bonus Payload
  description: >-
    Use the bonus payload <code>&lt;iframe width=&quot;100%&quot;
    height=&quot;166&quot; scrolling=&quot;no&quot; frameborder=&quot;no&quot;
    allow=&quot;autoplay&quot;
    src=&quot;https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/771984076&amp;color=%23ff5500&amp;auto_play=true&amp;hide_related=false&amp;show_comments=true&amp;show_user=true&amp;show_reposts=false&amp;show_teaser=true&quot;&gt;&lt;/iframe&gt;</code>
    in the <i>DOM XSS</i> challenge. (Difficulty Level: 1)
  max_attempts: 0
  value: 100
  category: XSS
  type: standard
  state: visible
  flags:
    - type: static
      content: c07c516476ae13131cf33339ac7ec2b405330809
      data: null
  hints:
    - type: standard
      content: Copy + Paste = Solved!
      cost: 10
- name: Reset Uvogin's Password
  description: >-
    Reset Uvogin's password via the <a href="/#/forgot-password">Forgot
    Password</a> mechanism with <i>the original answer</i> to his security
    question. (Difficulty Level: 4)
  max_attempts: 0
  value: 700
  category: Sensitive Data Exposure
  type: standard
  state: visible
  flags:
    - type: static
      content: bfd1576f307ccb8647b616a23cefc97bfb696a76
      data: null
  hints:
    - type: standard
      content: >-
        You might have to do some OSINT on his social media personas to find out
        his honest answer to the security question.
      cost: 70
- name: Meta Geo Stalking
  description: >-
    Determine the answer to John's security question by looking at an upload of
    him to the Photo Wall and use it to reset his password via the <a
    href="/#/forgot-password">Forgot Password</a> mechanism. (Difficulty Level:
    2)
  max_attempts: 0
  value: 250
  category: Sensitive Data Exposure
  type: standard
  state: visible
  flags:
    - type: static
      content: 760fcad7c06262d1055ca1be6ee5a409c828239c
      data: null
  hints:
    - type: standard
      content: Take a look at the meta data of the corresponding photo.
      cost: 25
- name: Visual Geo Stalking
  description: >-
    Determine the answer to Emma's security question by looking at an upload of
    her to the Photo Wall and use it to reset her password via the <a
    href="/#/forgot-password">Forgot Password</a> mechanism. (Difficulty Level:
    2)
  max_attempts: 0
  value: 250
  category: Sensitive Data Exposure
  type: standard
  state: visible
  flags:
    - type: static
      content: 09d4e07ef5bb24d8a4156d3da6c537725ca0be82
      data: null
  hints:
    - type: standard
      content: >-
        Take a look at the details in the photo to determine the location of
        where it was taken.
      cost: 25
- name: Kill Chatbot
  description: >-
    Permanently disable the support chatbot so that it can no longer answer
    customer queries. (Difficulty Level: 5)
  max_attempts: 0
  value: 1000
  category: Vulnerable Components
  type: standard
  state: visible
  flags:
    - type: static
      content: b24b9ca4a06a7e3e795b39c5c13b75bedc0e5755
      data: null
  hints:
    - type: standard
      content: >-
        Think of a way to get a hold of the internal workings on the chatbot
        API.
      cost: 100
- name: Poison Null Byte
  description: >-
    Bypass a security control with a <a
    href="http://hakipedia.com/index.php/Poison_Null_Byte">Poison Null Byte</a>
    to access a file not meant for your eyes. (Difficulty Level: 4)
  max_attempts: 0
  value: 700
  category: Improper Input Validation
  type: standard
  state: visible
  flags:
    - type: static
      content: 8c7e995b11904b5e43662ebb534749210d9a7e0e
      data: null
  hints:
    - type: standard
      content: >-
        Take a look at the details in the photo to determine the location of
        where it was taken.
      cost: 70
- name: Bully Chatbot
  description: 'Receive a coupon code from the support chatbot. (Difficulty Level: 1)'
  max_attempts: 0
  value: 100
  category: Miscellaneous
  type: standard
  state: visible
  flags:
    - type: static
      content: 1e10ae12b6467334b937846339132379dcc9496e
      data: null
  hints:
    - type: standard
      content: Just keep asking.
      cost: 10
- name: Local File Read
  description: >-
    Gain read access to an arbitrary local file on the web server. (Difficulty
    Level: 5)
  max_attempts: 0
  value: 1000
  category: Vulnerable Components
  type: standard
  state: visible
  flags:
    - type: static
      content: 0376a0d623c37ade2b120b3f12f8bf7c90215e9e
      data: null
  hints:
    - type: standard
      content: >-
        You should read up on vulnerabilities in popular NodeJs template
        engines.
      cost: 100
